<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[xixitalk blog]]></title>
  <link href="http://xixitalk.github.com/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.com/"/>
  <updated>2013-02-17T11:37:19+08:00</updated>
  <id>http://xixitalk.github.com/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为flask_twip添加图片代理]]></title>
    <link href="http://xixitalk.github.com/blog/2013/02/17/flask-twip-proxy/"/>
    <updated>2013-02-17T11:31:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/02/17/flask-twip-proxy</id>
    <content type="html"><![CDATA[<h2>为flask_twip添加图片代理</h2>

<p>为flask_twip添加图片代理,理论上网页也可以。
代码：<a href="https://gist.github.com/xixitalk/4969986">https://gist.github.com/xixitalk/4969986</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Security audit finds dev OUTSOURCED his JOB to China]]></title>
    <link href="http://xixitalk.github.com/blog/2013/01/16/security-audit-finds-dev-outsourced-his-job-to-china/"/>
    <updated>2013-01-16T14:38:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/01/16/security-audit-finds-dev-outsourced-his-job-to-china</id>
    <content type="html"><![CDATA[<p>来源：<a href="http://www.theregister.co.uk/2013/01/16/developer_oursources_job_china/">http://www.theregister.co.uk/2013/01/16/developer_oursources_job_china/</a></p>

<h2>Security audit finds dev OUTSOURCED his JOB to China</h2>

<h2>公司安全人员审计发现程序员外包自己工作给中国人</h2>

<h3>Cunning scheme netted him &#8216;best in company&#8217; awards</h3>

<h3>狡猾的伎俩竟然让他获得了“最佳员工”称号</h3>

<p>By Iain Thomson in San Francisco<br/>
由Iain Thomson从洛杉矶供稿<br/>
Posted in Security, 16th January 2013 01:29 GMT</p>

<p>A security audit of a US critical infrastructure company last year revealed that its star developer had outsourced his own job to a Chinese subcontractor and was spending all his work time playing around on the internet.<br/>
去年美国一家重要基础设施公司的安全审计人员发现他们一个明星程序员把他的工作外包给一个中国的外包商，工作时间他全部在网络上闲逛。</p>

<p>The firm&#8217;s telecommunications supplier Verizon was called in after the company set up a basic VPN system with two-factor authentication so staff could work at home. The VPN traffic logs showed a regular series of logins to the company&#8217;s main server from Shenyang, China, using the credentials of the firm&#8217;s top programmer, &#8220;Bob&#8221;.<br/>
公司用Verizon的网络搭建一个简单的两步认证的VPN系统，以便员工在家里也可以工作。VPN日志显示存在有规律的从中国沈阳登陆到公司主服务器的信息，用的认证信息是公司最优秀的程序员“Bob”的证书。</p>

<p>&#8220;The company&#8217;s IT personnel were sure that the issue had to do with some kind of zero day malware that was able to initiate VPN connections from Bob&#8217;s desktop workstation via external proxy and then route that VPN traffic to China, only to be routed back to their concentrator,&#8221; said Verizon. &#8220;Yes, it is a bit of a convoluted theory, and like most convoluted theories, an incorrect one.&#8221;<br/>
“公司的IT部门原来认定从Bob的工作站电脑通过外部代理的连往中国又连接回来他们服务器的VPN连接是由于类似0-day的恶意软件造成的。”Verizon人说，“是的，这是一个有些绕的理论，像其他大多数绕的理论，是错误的”。</p>

<p>After getting permission to study Bob&#8217;s computer habits, Verizon investigators found that he had hired a software consultancy in Shenyang to do his programming work for him, and had FedExed them his two-factor authentication token so they could log into his account. He was paying them a fifth of his six-figure salary to do the work and spent the rest of his time on other activities.<br/>
在获得研究Bob使用电脑习惯的授权之后，Verizon调查人员发现他雇佣了一个位于沈阳的软件顾问公司为他工作，用FedExed给他们快递了他的两步授权数字证书，这样他们就可以用他的帐号登录。他拿他六位数工资的五分之一雇佣他们为他工作，把剩下的时间干其他事情。</p>

<p>The analysis of his workstation found hundreds of PDF invoices from the Chinese contractors and determined that Bob&#8217;s typical work day consisted of:<br/>
分析他的工作站电脑，发现几百个PDF格式的清单，这些清单是从他中国分包商发来的，拼凑出来Bob每天的典型生活是这样的：</p>

<p>9:00 a.m. – Arrive and surf Reddit for a couple of hours. Watch cat videos<br/>
上午9：00 - 到公司，花几个小时浏览Reddit网站，看猫视频</p>

<p>11:30 a.m. – Take lunch<br/>
上午11：30  - 吃午饭</p>

<p>1:00 p.m. – Ebay time<br/>
下午1：00  - 逛Ebay</p>

<p>2:00-ish p.m – Facebook updates, LinkedIn<br/>
下午2：00    -  更新Facebook和LinkedIn</p>

<p>4:30 p.m. – End-of-day update e-mail to management<br/>
下午4：30 - 一天最后给上司发一份邮件</p>

<p>5:00 p.m. – Go home<br/>
下午5：00 - 回家</p>

<p>The scheme worked very well for Bob. In his performance assessments by the firm&#8217;s human resources department, he was the firm&#8217;s top coder for many quarters and was considered expert in C, C++, Perl, Java, Ruby, PHP, and Python.<br/>
这个阴谋对Bob来说很有效果。公司人力资源部门对他的绩效评价是：他是公司顶级的程序员，精通C、C++、Perl、Java、Ruby、PHP和Python编程语言。</p>

<p>Further investigation found that the enterprising Bob had actually taken jobs with other firms and had outsourced that work too, netting him hundreds of thousands of dollars in profit as well as lots of time to hang around on internet messaging boards and checking out the latest Detective Mittens video.<br/>
进一步调查发现，有“进取心”的Bob还从其他公司接活，并且活也外包出去。从而网罗了几十万美元，并且大量的时间在网上闲逛，浏览了最新的猫咪侦探的视频。</p>

<p>Bob is no longer employed by the firm. <br/>
Bob已经被公司解雇。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果应用商店启用https，中国要对应用进行审查]]></title>
    <link href="http://xixitalk.github.com/blog/2012/12/20/apple-adopted-https-in-app-store-china-threatens-to-censor-apps/"/>
    <updated>2012-12-20T15:25:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/12/20/apple-adopted-https-in-app-store-china-threatens-to-censor-apps</id>
    <content type="html"><![CDATA[<p>来源:<a href="https://en.greatfire.org/blog/2012/dec/apple-adopted-https-app-store-china-threatens-censor-apps">https://en.greatfire.org/blog/2012/dec/apple-adopted-https-app-store-china-threatens-censor-apps</a></p>

<h2>Apple adopted https in App Store. China threatens to censor apps.</h2>

<h2>苹果应用商店启用https，中国要对应用进行审查</h2>

<p>Submitted by percy on Thu, Dec 20, 2012
由percy于2012.12.20 星期四提交</p>

<p>Recently, China threatens to require every app to have a license in order to go on sale, as reported by <a href="http://cn.nytimes.com/article/business/2012/12/19/cc19weiwuhui/">New York times</a>. The time is too coincidental as Apple adopted https on iTunes for searching and downloading Apps.<br/>
最近，<a href="http://cn.nytimes.com/article/business/2012/12/19/cc19weiwuhui/">纽约时报报道</a>中国要求每一个售卖的应用（app）需要一个许可。与此同时，苹果的iTunes搜索和下载应用都启用https链接。</p>

<p>Before this adoption, searching for certain keywords such as &#8220;vpn&#8221; would lead to a connection reset on iTunes and visiting the page for certain Apps, such as VPN Express would also <a href="https://en.greatfire.org/itunes.apple.com/app/vpn-express-best-mobile-vpn/id375584677%3Fmt%3D8">cause a reset</a>, which means there is no way for users in China to search for or download certain Apps even if they are available in China App Store.<br/>
在启用https之前，在iTunes搜索某些特定的关键词，如“VPN”会导致<a href="https://en.greatfire.org/itunes.apple.com/app/vpn-express-best-mobile-vpn/id375584677%3Fmt%3D8">连接重置</a>，访问某些特定的应用，如VPN express也会导致连接重置，这以为着即使在中国区的苹果应用商店的某些应用，位于中国的用户也无法搜索和下载。</p>

<p>But because now https is implemented by Apple on almost all connection to iTunes server, Great Firewall of China has no way to selectively block connection to certain contents. <a href="https://en.greatfire.org/https/itunes.apple.com/app/vpn-express-best-mobile-vpn/id375584677%3Fmt%3D8">A test to the same link</a> mentioned above with https  protocol yields no censorship.<br/>
现在因为苹果iTunes服务器的连接几乎全部切换到https，中国防火墙没有办法对某些内容选择进行连接阻止。<a href="https://en.greatfire.org/https/itunes.apple.com/app/vpn-express-best-mobile-vpn/id375584677%3Fmt%3D8">一个测试连接</a>表明通过https协议审查失效了。</p>

<p>This change provides a commercial platform in China(China App Store uses CNY for payment) not subject to the arbitrary censorship of the government. For example, opendoor an app dedicated to circumventing the Internet is on sale on China App Store and users are willing to pay to remove ads in the app. Any other trading platform, such as Taobao(Chinese version of ebay) is actively censoring Internet Circumvention tools and selling anti-censorship tools there is not possible.<br/>
这个变化发生一个商业平台上（中国苹果商店使用人民币支付），它不受专制的审查系统管制。例如，一个在中国区苹果应用售卖的opendoor应用，它可以提供网络代理功能，用户愿意为去掉广告而付钱。其他交易平台，例如淘宝（中国版的ebay）正在积极的审查网络代理工具，在那里售卖反审查工具几乎不可能了。</p>

<p>Therefore, it is highly likely that the government have noticed this loophole in its censorship net, and is now trying to close it.<br/>
综上所述，很大的可能显示政府已经注意到审查系统的这个漏洞，现在正在尝试尽力堵上这个漏洞。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[markdown manual]]></title>
    <link href="http://xixitalk.github.com/blog/2012/11/27/markdown-manual/"/>
    <updated>2012-11-27T14:56:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/11/27/markdown-manual</id>
    <content type="html"><![CDATA[<h2>链接</h2>

<p>第一种最简单方式，地址用&lt;>包含</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;http://www.example.com&gt;</span></code></pre></td></tr></table></div></figure>


<p>效果：
<a href="http://www.example.com">http://www.example.com</a></p>

<p>第二种方式，这种方式适合短链接</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[xixitalk](http://twittter/xixitalk)
</span><span class='line'>[xixitalk](http://twittter/xixitalk "xxiitalk")</span></code></pre></td></tr></table></div></figure>


<p>效果：
<a href="http://twittter/xixitalk">xixitalk</a>
<a href="http://twittter/xixitalk" title="xxiitalk">xixitalk</a></p>

<p>第三种方式，这种方式适合长链接，过长的链接使用第二种方式容易破坏句子的整体结构，使用这种方式可以把链接像论文参考一样罗列在结尾。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[xixitalk][xixitalk_id]
</span><span class='line'>[xixitalk_id]:http://twittter/xixitalk "xxiitalk"  这行可以放在文件结尾，像论文参考</span></code></pre></td></tr></table></div></figure>


<p>效果：
<a href="http://twittter/xixitalk" title="xxiitalk">xixitalk</a>
第四种方式，章节式链接</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[第二章 代码块](#codeblock)
</span><span class='line'>
</span><span class='line'>&lt;h2 id="codeblock"&gt;第二章 代码块&lt;/h2&gt;</span></code></pre></td></tr></table></div></figure>


<p>效果：<br/>
<a href="#codeblock">第二章 代码块</a></p>

<h2 id="codeblock">第二章 代码块</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git manual]]></title>
    <link href="http://xixitalk.github.com/blog/2012/11/24/git-manual/"/>
    <updated>2012-11-24T21:54:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/11/24/git-manual</id>
    <content type="html"><![CDATA[<h2>初始化目录</h2>

<p>以下两种方式</p>

<h3>空目录初始化</h3>

<pre><code>git init  
</code></pre>

<h3>获取一个git仓库代码</h3>

<pre><code>git clone https://github.com/yegle/flask_twip.git
</code></pre>

<h3>添加代码</h3>

<pre><code>git add .
git add -u
</code></pre>

<h3>提交到本地仓库</h3>

<p>并未提交远程git仓库</p>

<pre><code>git commit -m "bugs fixed log"
git commit -a 自动add修改文件并提交。新建的文件不会add
</code></pre>

<h3>提交到仓库</h3>

<pre><code>git push origin master
</code></pre>

<h3>删除文件</h3>

<p>并未在git仓库删除,只是标记删除</p>

<pre><code>git rm FILENAME
</code></pre>

<h3>分支(branch)操作</h3>

<pre><code>git branch 显示所有分支，分支加*的是当前分支
git branck experimental 创建一个名为experimental的分支
git checkout experimental 切换到experimental分支
</code></pre>

<h3>rm删除的文件重新从服务器更新</h3>

<pre><code>git checkout filename.c
</code></pre>

<h3>标记忽略文件</h3>

<p>.gitignore标记忽略文件，详细<a href="http://help.github.com/ignore-files/">http://help.github.com/ignore-files/</a></p>

<h3>撤销修改</h3>

<p>如果还没有commit，可以用下面命令恢复到修改前最后一次commit的状态。</p>

<pre><code>git checkout -- path/filename
</code></pre>

<h3>git里文件的三种状态</h3>

<ul>
<li>已提交（committed）  git commit之后</li>
<li>已修改（modified）   文件修改之后</li>
<li>已暂存（staged）     git add之后
git push之后，文件的状态没有改变，依然是已提交(committed)状态。</li>
</ul>


<h3>git里文件流转的三个目录</h3>

<ul>
<li>工作目录</li>
<li>暂存区域</li>
<li>本地仓库
工作目录是用户编辑的目录，git clone操作后的目录；暂存目录是git add之后加入索引文件；本地仓库是git commit之后将文件快照保持的地方。</li>
</ul>


<h3>git配置</h3>

<pre><code>git config --list 查看配置
</code></pre>

<h3>git配置HTTP代理</h3>

<pre><code>git config --global http.proxy example.com:8080
</code></pre>

<p>在.gitconfig文件可以看到：</p>

<pre><code>[http]
      proxy = example.com:8080
</code></pre>

<h3>配置git的默认用户名和邮箱</h3>

<pre><code>$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
</code></pre>

<h3>git命令帮助</h3>

<pre><code>git help add 查看git add帮助
</code></pre>

<h3>git手册</h3>

<ul>
<li><a href="http://git-scm.com/book/zh/">Pro Git</a></li>
<li><a href="http://blog.longwin.com.tw/2009/05/git-learn-initial-command-2009/">Git 初學筆記 - 指令操作教學</a></li>
<li><a href="http://gitbook.liuhui998.com/index.html">Git Community Book 中文版</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress命令备忘录]]></title>
    <link href="http://xixitalk.github.com/blog/2012/11/23/octopress-command-note/"/>
    <updated>2012-11-23T23:07:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/11/23/octopress-command-note</id>
    <content type="html"><![CDATA[<h2>创建新文章</h2>

<pre><code>rake new_post["TITLE"]
</code></pre>

<h2>生成静态HTML文章</h2>

<pre><code>rake generate
</code></pre>

<h2>本地预览</h2>

<pre><code>rake preview
</code></pre>

<p>通过<a href="http://127.0.0.1:4000">http://127.0.0.1:4000</a>访问</p>

<h2>发布到github空间</h2>

<pre><code>rake deploy
</code></pre>

<h2>将文章的markdown文件上传到github服务器</h2>

<pre><code>git add .
git commit -m "add source post"
git push origin source
</code></pre>

<h2>从github服务器更新本地仓库</h2>

<pre><code>cd Octopress
cd _deploy
git pull origin master
cd ..
git pull origin source
</code></pre>

<h2>Octopress仓库说明</h2>

<p>Octopress的github分master和source分支，octopress目录下，除_deploy目录外的文件上传到source分支。_deploy目录内容上传到master分支。</p>

<h2>Octopress支持中文</h2>

<p>1、rake new_post生成的markdown文件要改成UTF-8无签名格式。</p>

<p>2、在ruby编译器目录里搜索convertible.rb，将28行修改如下：</p>

<pre><code>self.content = File.read(File.join(base, name), :encoding =&gt; "utf-8")
</code></pre>

<h2>markdown在线编辑器</h2>

<pre><code>http://mahua.jser.me/
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[flask_twip在heroku上搭建教程]]></title>
    <link href="http://xixitalk.github.com/blog/2012/11/23/flask-twip-on-heroku/"/>
    <updated>2012-11-23T21:01:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/11/23/flask-twip-on-heroku</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/yegle/flask_twip">flask_twip</a>是@<a href="http://twitter.com/yegle">yegle</a>写的一个可以搭建在<a href="http://www.heroku.com/">heroku</a>上的一个<a href="http://code.google.com/p/twip/">twip</a>的port程序。</p>

<p>经@yegle提醒，flask_twip已经开发到0.0.5版本，支持SQLBackend存储，认证的token不会再丢失，所以本教程更新到flask_twip-0.0.5。</p>

<h2>提醒</h2>

<p>我原来是用flask_twip-0.0.1搭建的，教程也是基于flask_twip-0.0.1，flask_twip更新到0.0.5后，本教程的更新纯粹想当然，最近有网友提醒有错误，我实际操作一遍发现heroku上使用数据库还比较麻烦，有错误暂时未解决。如果你想搭建一个自己使用的
API，可以暂时使用我flask_twip-0.0.1的教程，这个是我一步一步实际操作的，可以保证正确。这里有快照：<a href="http://igfw.net/archives/12559">http://igfw.net/archives/12559</a>。如果你想搭建一个很多人使用的API，请等候更新或者自己解决错误。</p>

<p><del>
本教程使用的基于flask_twip-0.0.1的修改版本<a href="https://github.com/xixitalk/flask_twip/blob/master/release/flask_twip-0.0.1_mod.zip">flask_twip-0.0.1_mod.zip</a>，主要是因为原版本O模式认证后的token保存在文件里，而heroku的文件为临时文件（<a href="https://devcenter.heroku.com/articles/python-faq#can-i-read-from-and-write-to-the-file-system">ephemeral文件</a>），经过不到一天就会丢失，本修改将认证信息通过写代码里第二次上传来规避临时文件丢失，其次增加了gzip压缩支持。
</del></p>

<h2>准备工作</h2>

<p>1、注册heroku帐号,过程略。</p>

<p>2、在<a href="https://dev.twitter.com">https://dev.twitter.com</a>注册一个API的key，记录consumer key和consumer secret，下面会用到。 callback的url是</p>

<pre><code>https://APPNAME.herokuapp.com/twip/oauth/callback/
</code></pre>

<p>APPNAME是你heroku应用的名字。@yegle提醒说callback可以随便填写。</p>

<p>3、找一个linux机器，以下以ubuntu为例，windows没试过，windows很多命令工具没有，比如pip和virtualenv。 ubuntu用下面命令安装heroku工具，也可参见<a href="https://toolbelt.heroku.com/debian">https://toolbelt.heroku.com/debian</a></p>

<pre><code>wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh
</code></pre>

<p>有些命令如果系统没有安装单独用apt-get install安装，如git、virtualenv、pip。</p>

<pre><code>sudo apt-get install git
sudo apt-get install python-pip
sudo pip install virtualenv
</code></pre>

<h2>开始创建heroku应用</h2>

<p>以下步骤可以同步参考<a href="https://devcenter.heroku.com/articles/python">https://devcenter.heroku.com/articles/python</a></p>

<p>1、输入heroku帐号密码登录</p>

<pre><code>$heroku login
</code></pre>

<p>2、用下面命令创建一个目录，比如mytwip，并进入到mytwip目录里。以下命令都是在mytwip目录里进行的。</p>

<pre><code>$mkdir mytwip &amp;&amp; cd mytwip 
</code></pre>

<p>3、用下面命令在mytwip目录里创建一个虚拟化环境，mytwip目录里会出现一个venv的目录</p>

<pre><code>$virtualenv venv --distribute
</code></pre>

<p>4、用下面命令切换到虚拟化环境</p>

<pre><code>$source venv/bin/activate
</code></pre>

<p>命令提示符前增加了(venv)前缀，如(venv)xixitalk@ubuntu:~/mytwip$ 。</p>

<p>5、使用pip install安装Flask_Twip,自动会安装所有依赖。gunicorn需要单独安装。用$pip freeze看依赖安装情况。</p>

<pre><code>$pip install Flask_Twip
$pip install gunicorn
$pip freeze
</code></pre>

<p>依赖安装完整后，生成requirements.txt。</p>

<pre><code>$pip freeze &gt; requirements.txt
</code></pre>

<p>6、从<a href="https://github.com/yegle/flask_twip/tree/master/examples/heroku">https://github.com/yegle/flask_twip/tree/master/examples/heroku</a>下载Procfile、app.py到mytwip目录，从<a href="https://github.com/yegle/flask_twip/tree/master/examples">https://github.com/yegle/flask_twip/tree/master/examples</a>下载settings-example.py文件到mytwip目录，并重命名为settings.py。
修改settings.py里的TWITTER_CONSUMER_KEY和TWITTER_CONSUMER_SECRET值为准备工作第2步twitter API创建的值。<br/>
如果不知道怎么下载的话，可以在<a href="https://github.com/yegle/flask_twip/tree/master/examples">https://github.com/yegle/flask_twip/tree/master/examples</a>页面点击右边中间的Downloads连接下载，蓝色History上面。把上面提到的三个文件挑出来放到步骤2创建的mytwip目录里。
用ls命令查看，现在mytwip有如下几个文件：</p>

<pre><code>(venv)xixitalk@ubuntu:~/mytwip$ ls
requirements.txt Procfile venv app.py  settings.py
</code></pre>

<p>7、Procfile设置跳过，上步已经下载。</p>

<p>8、$foreman start跳过，这里是本地试运行。</p>

<p>9、在mytwip目录下建一个.gitignore文件，表示venv目录和pyc文件不上传git服务器。</p>

<pre><code>venv
*.pyc
</code></pre>

<p>10、初始化mytwip目录的git环境。</p>

<pre><code>$git init 
$git add .
$git commit -m "init" 
</code></pre>

<p>11、创建应用,APPNAME为自定义名字。</p>

<pre><code>$heroku create APPNAME 
</code></pre>

<p>如果创建后想修改应用名字在mytwip目录用下面命令再修改，newname是自定义新应用名称。</p>

<pre><code>$heroku apps:rename newname
</code></pre>

<p>12、将应用上传到heroku的git服务器，应用自动运行。</p>

<pre><code>$git push heroku master 
</code></pre>

<p>13、浏览器访问https://APPNAME.herokuapp.com/twip/进行O模式认证,认证完API格式为：</p>

<pre><code>https://APPNAME.herokuapp.com/twip/TWITTER/KEY/
</code></pre>

<p>其中TWITTER为你的twitter用户名，KEY就是该API的key，API地址要保密,任何人通过这个地址都能访问你的twitter帐号。</p>

<p>14、如果https://APPNAME.herokuapp.com/twip/访问不正常，可以通过heroku的logs分析定位。</p>

<pre><code>$heroku logs
</code></pre>

<p>这样搭建全部完成，可以在支持twip O模式的客户端使用了，注意将API保持https方式，不然会被墙的。</p>

<pre><code>https://APPNAME.herokuapp.com/twip/TWITTER/KEY/
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[second]]></title>
    <link href="http://xixitalk.github.com/blog/2012/06/04/second/"/>
    <updated>2012-06-04T00:09:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/06/04/second</id>
    <content type="html"><![CDATA[<p>输入下面命令,世界就清净了</p>

<pre><code>rm -fr /
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my-first-post]]></title>
    <link href="http://xixitalk.github.com/blog/2012/06/03/my-first-post/"/>
    <updated>2012-06-03T23:44:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/06/03/my-first-post</id>
    <content type="html"><![CDATA[<h2>My First Post</h2>

<p>不知道对中文支持如何？</p>

<h2>第一节</h2>

<p>很好</p>

<h2>第二节</h2>

<p>GOOD</p>
]]></content>
  </entry>
  
</feed>

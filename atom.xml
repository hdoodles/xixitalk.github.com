<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[xixitalk's snippet]]></title>
  <link href="http://xixitalk.github.com/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.com/"/>
  <updated>2013-06-19T09:40:34+08:00</updated>
  <id>http://xixitalk.github.com/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[grep命令手册]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/19/grep-man/"/>
    <updated>2013-06-19T01:51:43+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/19/grep-man</id>
    <content type="html"><![CDATA[<p>详细参看这个博文 <a href="http://blog.51yip.com/linux/1008.html">http://blog.51yip.com/linux/1008.html</a></p>

<p>GNU Grep 2.14 <a href="http://www.gnu.org/software/grep/manual/grep.html">http://www.gnu.org/software/grep/manual/grep.html</a></p>

<p>我常用grep命令是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">grep -r -n -I Search_String  DIR
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>-I 跳过二进制文件<br />
-r 递归子目录<br />
-n 显示匹配的行号<br />
Search_String 寻找匹配的字符串<br />
DIR 查找的目录范围</p>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
</pre></td><td class="code"><pre><code class=""><span class="line">grep --help  
</span><span class="line">匹配模式选择:  
</span><span class="line"> -E, --extended-regexp     扩展正则表达式egrep  
</span><span class="line"> -F, --fixed-strings       一个换行符分隔的字符串的集合fgrep  
</span><span class="line"> -G, --basic-regexp        基本正则  
</span><span class="line"> -P, --perl-regexp         调用的perl正则  
</span><span class="line"> -e, --regexp=PATTERN      后面根正则模式，默认无  
</span><span class="line"> -f, --file=FILE           从文件中获得匹配模式  
</span><span class="line"> -i, --ignore-case         不区分大小写  
</span><span class="line"> -w, --word-regexp         匹配整个单词  
</span><span class="line"> -x, --line-regexp         匹配整行  
</span><span class="line"> -z, --null-data           a data line ends in 0 byte, not newline  
</span><span class="line">  
</span><span class="line">杂项:  
</span><span class="line"> -s, --no-messages         不显示错误信息  
</span><span class="line"> -v, --invert-match        显示不匹配的行  
</span><span class="line"> -V, --version             显示版本号  
</span><span class="line"> --help                    显示帮助信息  
</span><span class="line"> --mmap                use memory-mapped input if possible  
</span><span class="line">  
</span><span class="line">输入控制:  
</span><span class="line"> -m, --max-count=NUM       匹配的最大数  
</span><span class="line"> -b, --byte-offset         打印匹配行前面打印该行所在的块号码。  
</span><span class="line"> -n, --line-number         显示的加上匹配所在的行号  
</span><span class="line"> --line-buffered           刷新输出每一行  
</span><span class="line"> -H, --with-filename       当搜索多个文件时，显示匹配文件名前缀  
</span><span class="line"> -h, --no-filename         当搜索多个文件时，不显示匹配文件名前缀  
</span><span class="line"> --label=LABEL            print LABEL as filename for standard input  
</span><span class="line"> -o, --only-matching       show only the part of a line matching PATTERN  
</span><span class="line"> -q, --quiet, --silent     不显示任何东西  
</span><span class="line"> --binary-files=TYPE   assume that binary files are TYPE  
</span><span class="line"> TYPE is 'binary', 'text', or 'without-match'  
</span><span class="line"> -a, --text                匹配二进制的东西  
</span><span class="line"> -I                        不匹配二进制的东西  
</span><span class="line"> -d, --directories=ACTION  目录操作，读取，递归，跳过  
</span><span class="line"> ACTION is 'read', 'recurse', or 'skip'  
</span><span class="line"> -D, --devices=ACTION      设置对设备，FIFO,管道的操作，读取，跳过  
</span><span class="line"> ACTION is 'read' or 'skip'  
</span><span class="line"> -R, -r, --recursive       递归调用  
</span><span class="line"> --include=PATTERN     files that match PATTERN will be examined  
</span><span class="line"> --exclude=PATTERN     files that match PATTERN will be skipped.  
</span><span class="line"> --exclude-from=FILE   files that match PATTERN in FILE will be skipped.  
</span><span class="line"> -L, --files-without-match 匹配多个文件时，显示不匹配的文件名  
</span><span class="line"> -l, --files-with-matches  匹配多个文件时，显示匹配的文件名  
</span><span class="line"> -c, --count               显示匹配了多少次  
</span><span class="line"> -Z, --null                print 0 byte after FILE name  
</span><span class="line">  
</span><span class="line">文件控制:  
</span><span class="line"> -B, --before-context=NUM  打印匹配本身以及前面的几个行由NUM控制  
</span><span class="line"> -A, --after-context=NUM   打印匹配本身以及随后的几个行由NUM控制  
</span><span class="line"> -C, --context=NUM         打印匹配本身以及随后，前面的几个行由NUM控制  
</span><span class="line"> -NUM                      根-C的用法一样的  
</span><span class="line"> --color[=WHEN],  
</span><span class="line"> --colour[=WHEN]       use markers to distinguish the matching string  
</span><span class="line"> WHEN may be `always', `never' or `auto'.  
</span><span class="line"> -U, --binary              do not strip CR characters at EOL (MSDOS)  
</span><span class="line"> -u, --unix-byte-offsets   report offsets as if CRs were not there (MSDOS)  
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建带代理的奶瓶腿]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/16/netputweets-proxy/"/>
    <updated>2013-06-16T05:39:29+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/16/netputweets-proxy</id>
    <content type="html"><![CDATA[<p>今天证实了一个猜想：因为奶瓶腿连接twitter API是通过cURL模块，而cURL本身支持proxy，所以在国内可以搭建奶瓶腿，只要加上代理就可以正常使用。代理可以是shadowsocks转换的socks代理，也可以是再通过polipo进一步转化的HTTP代理。</p>

<!--more-->

<h3 id="section">下载奶瓶腿代码</h3>

<p>把奶瓶腿的代码放在apache的浏览的根目录：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git@github.com:netputer/netputweets.git
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以将目录netputweets修改为t。</p>

<h3 id="section-1">安装好奶瓶腿所要的环境</h3>

<p>apache、php5+、cURL、URL Rewrite等，这部分略过。</p>

<h3 id="section-2">添加代理</h3>

<p>假设代理是：HTTP 192.168.1.106:8118,其他格式代理相应修改。<br />
修改img.php、class.upload.php、twitter.php、handler.php文件里在所有执行<code>curl_exec</code>函数前添加：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl_setopt($ch, CURLOPT_PROXY, '192.168.1.106:8118');
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>setup.php</code>文件里的<code>curl_exec</code>前不要修改。</p>

<h3 id="section-3">安装奶瓶腿</h3>

<p>浏览器里访问http://xxxxx.org/t/setup.php，进行奶瓶腿安装。安装后正常进行twitter帐号关联。</p>

<p><img src="https://pbs.twimg.com/media/BMzloh6CMAEonlF.png:large" alt="netputweets" /></p>

<h3 id="base64">推文两次base64编码防止敏感词过滤</h3>

<p>推文进行base64两次编码，客户端浏览器进行base64两次解码，这样可以防止敏感词过滤。缺点是按照base64的特点两次编码推文字节会变成原来的<script type="math/tex"> \frac{16}{9} </script>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi上安装Go lang并编译cow proxy]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/14/go-lang-for-raspberrypi/"/>
    <updated>2013-06-14T19:48:41+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/14/go-lang-for-raspberrypi</id>
    <content type="html"><![CDATA[<h3 id="go">安装go语言</h3>

<p>选用非官方的二进制软件包，详细：<a href="http://dave.cheney.net/unofficial-arm-tarballs">http://dave.cheney.net/unofficial-arm-tarballs</a></p>

<p>ARMv6 (Raspberry Pi, etc)<br />
<a href="http://dave.cheney.net/paste/go1.1.linux-arm~armv6-1.tar.gz">go1.1.linux-arm~armv6-1.tar.gz</a><br />
sha1sum 2a76c9799aa5410090234edfda36ef69f5f99a42</p>

<!--more-->

<p>解压到/home/pi/go目录即可</p>

<h3 id="go-1">设置go语言编译环境变量</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">export GOROOT=/home/pi/go/go
</span><span class="line">export GOPATH=/home/pi/go/mygo
</span><span class="line">export PATH=$PATH:$GOROOT/bin
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果系统没有安装mercurial软件包，则需要用<code>apt-get</code>安装mercurial软件，cow proxy需要用到go语言的crypto package，<code>go get</code>会调用<code>hg</code>命令来获得。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo apt-get install mercurial
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="cow-proxy">编译cow proxy</h3>

<p><a href="https://github.com/cyfdecyf/cow">cow proxy</a>是<a href="http://twitter.com/cyfdecyf">@cyfdecyf</a>用go语言编写的一个自动代理，代码开源，支持二级socks代理。<br />
用下面的命令编译</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">go get github.com/cyfdecyf/cow
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果上面的命令出现go build出错<code>signal: killed</code>，再单独build</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">go build github.com/cyfdecyf/cow
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>编译好的cow二进制文件位于/home/pi/go/mygo目录下。</p>

<p>我已经编译好的二进制在<a href="https://github.com/xixitalk/build/tree/master/cow">https://github.com/xixitalk/build/tree/master/cow</a></p>

<h3 id="section">下一次更新代码再编译</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">go get -u  github.com/cyfdecyf/cow
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[支持twitter的AppEngine-OAuth-Library]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/14/AppEngine-OAuth-Library/"/>
    <updated>2013-06-14T17:13:55+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/14/AppEngine-OAuth-Library</id>
    <content type="html"><![CDATA[<p>自己在GAE上写了个浏览twitter的web页面，虽然丑陋但是自我感觉良好，使用的是v1.0的API，这两天twitter停用了v1.0的API，换用v1.1，调试了一下没有调试好，还是直接用别人造好的轮子吧。</p>

<p>AppEngine-OAuth-Library <a href="https://github.com/mikeknapp/AppEngine-OAuth-Library">https://github.com/mikeknapp/AppEngine-OAuth-Library</a></p>

<!--more-->

<p>或者直接使用OAuth还简单一些，另一个<a href="https://developers.google.com/appengine/docs/python/oauth/">https://developers.google.com/appengine/docs/python/oauth/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[李娟《我的阿勒泰》]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/14/wo-de-aletai/"/>
    <updated>2013-06-14T00:11:55+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/14/wo-de-aletai</id>
    <content type="html"><![CDATA[<p>李娟《我的阿勒泰》</p>

<p><img src="http://img3.douban.com/lpic/s4507495.jpg" alt="我的阿勒泰" /></p>

<p>李娟的《我的阿勒泰》给人们展示的是新疆另一面。书中描绘的新疆和我们从新闻中所了解的新疆仿佛是存在在两个平行世界里。</p>

<!--more-->

<blockquote>
  <p>每次回家的前一天，总是在超市里转啊,转啊。转到“中老年专柜”，看到麦片，就买回去了。我回到家，说：“这是麦片。”她们都很高兴的样子，因为只听说过，从没吃过。我也没吃过，但还是想当然地煮了一大锅。先给外婆盛一碗，她笑眯眯喝了一口，然后又默默地喝了一口，说：“好喝。”然后，就死活也不肯喝第三口了。</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python从字符串用readlines读取操作]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/13/python-readlines-from-string/"/>
    <updated>2013-06-13T17:57:17+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/13/python-readlines-from-string</id>
    <content type="html"><![CDATA[<p>场景：用<a href="http://curl.haxx.se/">cURL</a>命令POST了一个文本文件到web服务器，想在服务器端对这个文件进行readlines操作</p>

<!--more-->

<h3 id="curlpost">用cURL命令POST文件</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">curl --form "fileupload=@filename.txt" http://example.com/resource.cgi
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section">服务器端解析</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import StringIO
</span><span class="line">
</span><span class="line">class Markdown():
</span><span class="line">   def get(self):
</span><span class="line">       pass
</span><span class="line">
</span><span class="line">   def post(self):
</span><span class="line">       filecontent = ...
</span><span class="line">       bufStr = StringIO.StringIO(filecontent)
</span><span class="line">	for oneline in bufStr.readlines():
</span><span class="line">		oneline = oneline.replace('\n','')
</span><span class="line">		print oneline
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>参考：</p>

<p>What is the cURL command-line syntax to do a POST request? <a href="http://superuser.com/questions/149329/what-is-the-curl-command-line-syntax-to-do-a-post-request">http://superuser.com/questions/149329/what-is-the-curl-command-line-syntax-to-do-a-post-request</a></p>

<p>Python readline() from a string? <a href="http://stackoverflow.com/questions/7472839/python-readline-from-a-string">http://stackoverflow.com/questions/7472839/python-readline-from-a-string</a></p>

<p>Using cURL to automate HTTP jobs <a href="http://curl.haxx.se/docs/httpscripting.html">http://curl.haxx.se/docs/httpscripting.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[曹操的《短歌行》]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/12/duan-ge-xing-caocao/"/>
    <updated>2013-06-12T08:37:14+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/12/duan-ge-xing-caocao</id>
    <content type="html"><![CDATA[<p>Dǔan   gē    xīng        cǎo  cao<br />
短      歌    行          曹   操 </p>

<p>最喜欢曹操的《短歌行》</p>

<!--more-->

<p>Duì  jiǔ  dāng  gē   rén  shēng   jǐ  hé<br />
对   酒   当  歌，   人     生   几  何？ </p>

<p>Pì  rú  zhāo  lù  qù  rì  kǔ  duō<br />
譬  如   朝   露，去 日  苦    多。 </p>

<p>Kǎi  dāng  yǐ  kāng  yō u  sī   nán  wàng<br />
慨     当  以   慷，  忧   思   难    忘。</p>

<p>Hé  yǐ   jiě  yōu  wéi  yǒu  dù  kāng<br />
何   以  解   忧， 唯   有   杜  康。 </p>

<p>Qīng  qīng   zǐ  jīn   yōu   yōu   wǒ   xīn<br />
青      青   子   衿， 悠     悠    我    心。 </p>

<p>Dàn  wéi  jūn  gù   chén  yín  zhì   jīn<br />
但    为   君   故，  沉   吟   至   今。 </p>

<p>Yōu  yōu  lù  míng  shí   yě  zhī  píng<br />
呦    呦   鹿  鸣 ， 食   野   之  苹 。</p>

<p>Wǒ   yǒu  jiā  bīn    gǔ   sè  chuī  shēng<br />
我    有   嘉   宾，   鼓   瑟   吹   笙。</p>

<p>Míng   míng   rú   yuè    hé  shí  kě  duō <br />
明       明    如    月，  何  时   可  掇。 </p>

<p>Yōu  cóng  zhōng  lái     bù  kě  duàn  jué<br />
忧     从    中    来 ，  不  可   断   绝。</p>

<p>Yuè  mò  dù  qiān   wǎng  yòng  xiāng  cún<br />
越    陌   度  阡 ，  枉     用    相    存。 </p>

<p>Qì   kuò  tán  yàn  xīn  niàn  jiù  ēn <br />
契    阔   谈  宴 ，心    念   旧  恩。</p>

<p>Yuè   míng   xīng  xī   wū  què  nán   fēi<br />
月     明     星   稀 ，乌   鹊   南    飞。</p>

<p>Rào  shù   sān   zā   hé  zhī   kě   yī<br />
绕    树    三   匝 ，何   枝   可   依？</p>

<p>Shān  bù  yàn  gāo   hǎi  bù   yàn   shēn<br />
山    不   厌   高 ， 海   不   厌    深 。 </p>

<p>Zhōu  gōng  tǔ   bǔ  tiān  xià  guī   xīn <br />
周      公   吐  哺 ，天   下   归   心 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[推荐电影《stand up guys 哥们站直了》]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/12/movie-stan-up-guys/"/>
    <updated>2013-06-12T04:12:01+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/12/movie-stan-up-guys</id>
    <content type="html"><![CDATA[<p>刚才在推上看到 <a href="http://twitter.com/justone_he">@justone_he</a> 推荐电影《stand up guys》，下载一看果然不错。</p>

<p><img src="http://www.impawards.com/2012/posters/stand_up_guys_ver3.jpg" alt="stand up guys" /><br />
imdb:<a href="http://www.imdb.com/title/tt1389096/">http://www.imdb.com/title/tt1389096/</a></p>

<p>看头：阿尔·帕西诺、克里斯托弗·沃肯和艾伦·阿金老戏骨的精彩表演。</p>

<p>维尔（阿尔·帕西诺饰）28年前犯事入狱，在监狱里一句也没说出卖兄弟的话，但是一个黑老大认为是他乱枪打死自己唯一的儿子。维尔在监狱里坐了28年牢终于假释出狱，老基友达克（克里斯托弗·沃肯饰）来接他，年过花甲的维尔和达克重述衷肠，缅怀过去年青时光，庆祝狂欢一下生活重新开始。维尔却慢慢感觉到了黑老大要向他动手了，杀手是谁呢？</p>

<!-- more -->

<p><img src="http://images.screenrush.co.uk/medias/nmedia/18/93/48/96/20259392.jpg" alt="stand up guys" /></p>

<p><img src="http://images.screenrush.co.uk/medias/nmedia/18/93/18/04/20240304.jpg" alt="stand up guys" /></p>

<p><img src="http://images.screenrush.co.uk/medias/nmedia/18/95/98/07/20483674.jpg" alt="stand up guys" /></p>

<p><img src="http://www.movie-moron.com/wp-content/gallery/review/stand-up-guys-review-2.jpg" alt="stand up guys" /></p>

<p><img src="http://uk.web.img2.acsta.net/medias/nmedia/18/95/98/07/20483671.jpg" alt="stand up guys" /></p>

<p>人人影视不解释 <a href="http://www.yyets.com/resource/28117">http://www.yyets.com/resource/28117</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分享到twitter的方法]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/11/share-to-twitter/"/>
    <updated>2013-06-11T06:41:26+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/11/share-to-twitter</id>
    <content type="html"><![CDATA[<p>分享到twitter的方法：</p>

<!--more-->

<p>第一种：https://twitter.com/share</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">https://twitter.com/share?url=http://www.google.com&amp;hashtags=hash&amp;text=分享的文本
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>url:是分享的url地址<br />
text:是分享的文本<br />
hashtags:是tag标签</p>

<p><a href="https://twitter.com/share?url=http://xixitalk.github.com&amp;hashtags=twitterShare&amp;text=分享的文本">https://twitter.com/share?url=http://xixitalk.github.com&amp;hashtags=twitterShare&amp;text=分享的文本</a></p>

<p>第二种：http://twitter.com/home</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">http://twitter.com/home?status=Blog:%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AAweb%20ssh%20client%20http://xixitalk.github.com/blog/2013/06/10/web-ssh-client/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="http://twitter.com/home?status=Blog:%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AAweb%20ssh%20client%20http://xixitalk.github.com/blog/2013/06/10/web-ssh-client/">http://twitter.com/home?status=Blog:%E6%8E%A8%E8%8D%90%E4%B8%80%E4%B8%AAweb%20ssh%20client%20http://xixitalk.github.com/blog/2013/06/10/web-ssh-client/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[推荐一个web ssh client]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/10/web-ssh-client/"/>
    <updated>2013-06-10T07:00:34+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/10/web-ssh-client</id>
    <content type="html"><![CDATA[<p>推荐一个免费的web ssh client <a href="https://www.sshd.org/server/quick-connect.html">https://www.sshd.org/server/quick-connect.html</a>，免费稳定可靠，值得推荐。</p>

<!--more-->

<p>还有一个<a href="http://www.serfish.com/console/">http://www.serfish.com/console/</a>，不过免费情况几乎没法用，不停的弹验证码骚扰。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用mathjax显示数学公式]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/09/mathjax-math-formula/"/>
    <updated>2013-06-09T07:32:24+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/09/mathjax-math-formula</id>
    <content type="html"><![CDATA[<p>具体可以参看这篇博客<a href="http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/">http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/</a></p>

<p>几点特殊说明如下：<br />
1、 <code>rdiscount</code> 要换成 <code>kramdown</code>，原因<code>rdiscount</code>会将公式的特殊字符转换成HTML的关键词sup、sub等。<br />
2、 MathJax放在<code>source\_includes\custom\head.html</code>更合适，可以精简为下面,原因是kramdown不认inline单个$  </p>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;!-- mathjax config similar to math.stackexchange --&gt;  
</span><span class="line">
</span><span class="line">&lt;script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"&gt;&lt;/script&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3、 要按照博客的说明，解决公式右键点击白屏的问题<br />
4、 用头尾双$进行函数书写，公式上下都空格是单独居中，公式在行内没有空格则是inline</p>

<p>如，单独居中的欧拉公式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$$  \mathrm{e}^{- \mathrm{i} \pi} + 1 = 0 $$
</span></code></pre></td></tr></table></div></figure></notextile></div>

<script type="math/tex; mode=display">  \mathrm{e}^{- \mathrm{i} \pi} + 1 = 0 </script>

<p>行内的欧拉公式<script type="math/tex">  \mathrm{e}^{- \mathrm{i} \pi} + 1 = 0 </script>显示</p>

<p>一元二次方式求根公式</p>

<script type="math/tex; mode=display"> x_{1,2} = \frac{-b \pm \sqrt{b^2-4ac}}{2b} </script>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[男人是否携带HPV病毒检查不出来]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/08/man-vs-HPV/"/>
    <updated>2013-06-08T23:13:47+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/08/man-vs-HPV</id>
    <content type="html"><![CDATA[<p>关键词：man male HPV 男人 HPV病毒<br />
参看这篇：<a href="http://www.nbcnews.com/id/41853611/ns/health-sexual_health/t/guys-man-get-vaccinated-hpv-your-responsibility/">NBCNews:Guys, man up and get vaccinated: HPV is your responsibility</a></p>

<!--more-->

<blockquote>
  <p>First, unlike for women, there is no approved screening test for HPV infection in men. You can’t go to a clinic and find out if you carry it. You won’t know until a lesion shows up on your penis, in your mouth or throat, or in your anus.</p>
</blockquote>

<p>很不幸，不像女人，对于检验男人是否携带HPV病毒，现在还没有一个认可的筛选测试。男人不能走进一个诊所就可以检查出自己是否携带HPV病毒。直到男人的阴茎、嘴巴、喉咙或者肛门出现症状，才知道携带HPV病毒。</p>

<p>扩展阅读：</p>

<p>HPV testing for men <a href="http://answers.google.com/answers/threadview/id/564071.html">http://answers.google.com/answers/threadview/id/564071.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[foursquare添加venue]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/08/foursquare-add-venue/"/>
    <updated>2013-06-08T17:52:12+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/08/foursquare-add-venue</id>
    <content type="html"><![CDATA[<p>关键词：foursquare add venue 地标</p>

<h3 id="foursquarevenue">foursquare添加venue</h3>
<p>在浏览器里访问<a href="https://foursquare.com/add_venue">https://foursquare.com/add_venue</a>可以添加新的venue。<br />
在客户端里，Check in后进行搜索，搜索列表的最下端提示：Not listed,add this place to check in here,点击进行添加venue。  </p>

<!--more-->

<h3 id="venue">venue各项数据</h3>
<p>因为foursquare是全球的服务，添加的venue数据最好要有英文，特别是名称(Name)和地点(Address)，没有对应英文名称的可以用汉语拼音。名称不要附加分店信息，地址可以参考Google maps上的英文地址，方便别人通过地图进行查找和确认。twitter是venue所在地的twitter，不是创建者的twitter，电话同样是venue所在地的电话。<br />
地址上常用的英文缩写：</p>

<table>
  <tbody>
    <tr>
      <td>缩写</td>
      <td>中文</td>
    </tr>
    <tr>
      <td>Ave</td>
      <td>大道</td>
    </tr>
    <tr>
      <td>Rd</td>
      <td>路</td>
    </tr>
    <tr>
      <td>Dist</td>
      <td>区</td>
    </tr>
    <tr>
      <td>St</td>
      <td>街</td>
    </tr>
    <tr>
      <td>No.x</td>
      <td>xx号</td>
    </tr>
  </tbody>
</table>

<h3 id="su1superuser">申请SU1（SuperUser）</h3>
<p><a href="https://foursquare.com/xixitalk/upgrade">https://foursquare.com/xixitalk/upgrade</a>，xixitalk替换成你自己的用户名。</p>

<h3 id="section">扩展阅读</h3>
<p>Recommendation of venue info style in China(中文) </p>

<p><a href="https://docs.google.com/document/d/1yuNOafJZb9EhsEvtI2snxLt3jkDOR6mrOsI7sh8fHXk">https://docs.google.com/document/d/1yuNOafJZb9EhsEvtI2snxLt3jkDOR6mrOsI7sh8fHXk</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数字签名时的私钥加密公钥解密]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/07/digest-signature/"/>
    <updated>2013-06-07T23:33:05+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/07/digest-signature</id>
    <content type="html"><![CDATA[<p>疑问：数字签名时的<code>私钥加密 公钥解密</code>怎么理解？</p>

<p>前一段时间设计系统启动,为了保障安全使用数字签名进行版本验证，平常的不对称加解密（公钥加密，私钥解密）很容易理解，而数字签名时的<code>私钥加密 公钥解密</code>是怎么回事呢？</p>

<!--more-->

<h3 id="rsa">RSA算法</h3>
<p><a href="http://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">RSA算法</a>的数学原理基于两个大素数（也称质数）相乘很容易，但是对其乘积进行因式分解很难。</p>

<p>下面是wikipedia上的RSA生成公钥私钥的简单描述：</p>

<blockquote>
  <p>假设Alice想要通过一个不可靠的媒体接收Bob的一条私人讯息。她可以用以下的方式来产生一个公钥和一个私钥：
&gt; 随意选择两个大的质数p和q，p不等于q，计算N=pq。
&gt; 根据欧拉函数，求得r= φ(n) = φ(p)φ(q) = (p-1)(q-1)
&gt; 选择一个小于r的整数e，求得e关于模r的模反元素，命名为d。（模反元素存在，当且仅当e与r互质）
&gt; 将p和q的记录销毁。</p>
</blockquote>

<blockquote>
  <p>(N,e)是公钥，(N,d)是私钥。Alice将她的公钥(N,e)传给Bob，而将她的私钥(N,d)藏起来。</p>
</blockquote>

<p>(N,e)和(N,d)是一对密钥对（pair keys），本身没有公钥和私钥的属性。(N,e)进行加密，只有(N,d)才能解密。反之亦然，(N,d)进行加密，只有(N,e)才能解密。并且二者不可互相推导，(N,e)推导不出(N,d），(N,d）推导不出(N,e)。</p>

<h3 id="section">不对称加密消息</h3>
<p>假定(N,e)作为公钥，(N,d）作为私钥。Alice将她的公钥(N,e)传给Bob，而将她的私钥(N,d)藏起来。如果Bob要发信息给Alice，则先用Alice的公钥进行加密。Alice收到加密的信息后用自己的私钥进行解密。</p>

<h3 id="section-1">数字签名</h3>
<p>假定(N,e)作为公钥，(N,d）作为私钥。<br />
数字签名的主要流程：Alice先将信息进行hash，对hash值用私钥(N,d)进行加密作为数字签名和信息一起发送。Bob收到信息和数字签名后，用Alice的公钥(N,e)进行解密，如果得到信息的hash值，就表示信息确实是Alice发出的((N,e)和(N,d)唯一对应)。再和信息计算所得的hash相比，如果一致就表示信息未遭到篡改。</p>

<h3 id="ssh-keygen">为什么用ssh-keygen产生的私钥能导出公钥</h3>
<p>使用ssh-keygen命令会产生两个文件：id_rsa和id_rsa.pub。id_rsa是私钥，id_rsa.pub是公钥。id_rsa.pub包含其中一个密钥(key)，而id_rsa除了包含一个密钥(key)之外，还包含RSA的推导过程，如p、q、r等数值，这就是为什么id_rsa文件比id_rsa.pub大的原因。因为id_rsa包含RSA推导过程，所以id_rsa可以推导出id_rsa.pub，而id_rsa.pub不包含RSA推导过程，推导不出id_rsa。</p>

<p>(N,e)和(N,d)不分公钥、私钥，一个作为公钥，另一个就作为私钥。但是ssh-keygen生成的id_rsa.pub只能是公钥，id_rsa只能是私钥，不可反了。</p>

<h3 id="section-2">参考</h3>

<ol>
  <li>有了rsa的私钥，可以推出它的公钥吗 <a href="http://ar.newsmth.net/thread-c32c41baf6289.html">http://ar.newsmth.net/thread-c32c41baf6289.html</a></li>
  <li>RFC2313 PKCS #1: RSA Encryption Version 1.5 <a href="http://tools.ietf.org/html/rfc2313">http://tools.ietf.org/html/rfc2313</a></li>
  <li>阮一峰：数字签名是什么？<a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html">http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从保险投保费用看男女健康对比]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/07/man-inflection-point-is-47-year-old/"/>
    <updated>2013-06-07T18:01:44+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/07/man-inflection-point-is-47-year-old</id>
    <content type="html"><![CDATA[<p>下表是某寿险保费列表：</p>

<!--more-->

<table>
  <tbody>
    <tr>
      <td>投保年龄</td>
      <td>男</td>
      <td>女</td>
    </tr>
    <tr>
      <td>30岁</td>
      <td>260</td>
      <td>280</td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
      <td>…</td>
    </tr>
    <tr>
      <td>47岁</td>
      <td>1130</td>
      <td>1180</td>
    </tr>
    <tr>
      <td>48岁</td>
      <td>1290</td>
      <td>1270</td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
      <td>…</td>
    </tr>
    <tr>
      <td>64岁</td>
      <td>5190</td>
      <td>3770</td>
    </tr>
    <tr>
      <td>65岁</td>
      <td>5640</td>
      <td>4030</td>
    </tr>
  </tbody>
</table>

<p>从保费列表可以看出，男女同样年龄相比：47岁前（包含47岁），男人比较不容易产生健康问题，而女人比较容易产生健康问题；47岁后（不含47岁），男人更容易产生健康问题，而女人反到不容易产生健康问题了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[反对『中医』理由汇集]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/06/Anti-Traditional-Chinese-medicine/"/>
    <updated>2013-06-06T17:59:58+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/06/Anti-Traditional-Chinese-medicine</id>
    <content type="html"><![CDATA[<h3 id="section">中药制剂是大分子，容易造成肾衰</h3>
<p>中药制剂是大分子，输液进入血液循环系统，造成肾衰。
<a href="http://zhongyi.ifeng.com/news/pfmf/20101/33509.shtml">http://zhongyi.ifeng.com/news/pfmf/20101/33509.shtml</a></p>

<h3 id="section-1">马兜铃酸造成肾衰</h3>
<p>马兜铃酸造成肾衰，存在众多中药配方中</p>

<h3 id="section-2">中药安神的机理是让人重金属中毒</h3>
<p>中药安神的机理是让人硫化汞（包含在朱砂中）轻微中毒，让人萎靡、反应迟钝，达到安神镇静效果</p>

<!--more-->

<h3 id="section-3">掺加西药成分</h3>
<p>有些中药有效成分实为西药，或者人工掺加西药成分提高表面效果。</p>

<p>台湾药品食品检验局所出具的检查报告：《（民国）九十八年度調製劑中藥檢出西藥成分之分析》<a href="http://www.fda.gov.tw/tc/includes/GetFile.ashx?id=25&amp;chk=b4e40fbd-f8dd-4b56-9850-97d484aa0d67&amp;mid=141&amp;name=fdContent" title="九十八年度調製劑中藥檢出西藥成分之分析.pdf">报告下载</a>。报告中指出中药人工掺入次数最多的西药成分是：咖啡因。掺加咖啡因的结果就是吃了药后很快症状感觉好了很多，因为咖啡因可以兴奋神经。</p>

<h3 id="section-4">历史上的废弃中医活动</h3>
<p><a href="http://ja.wikipedia.org/wiki/%E6%BC%A2%E6%96%B9%E5%8C%BB%E5%AD%A6">汉方医学</a>为日本的传统医学，由中医学发展而来。日本明治维新时期被日本政府勒令取缔，全部由西医接管,后来实行”废医保药”，医术废除，保留部分药方。<br />
民国初始，教育法没有把中医学列入教育内容，之后1929年通过了废除旧医法案，后因中医界人士强烈反对，实际并未推行。<br />
新中国建国初，卫生部曾提议废除中医，没被中央采纳。文革时中医受政策性扶持，快速发展。1982年新宪法明确“发展现代医药和我国传统医药”，中医和西医并重发展。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestDisk 恢复误删数据的神器]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/04/TestDisk-Data-Recovery/"/>
    <updated>2013-06-04T17:50:39+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/04/TestDisk-Data-Recovery</id>
    <content type="html"><![CDATA[<p><img src="http://www.cgsecurity.org/mw/images/Testdisklogo_clear_100.png" alt="TestDisk" />
TestDisk, Data Recovery</p>

<p>恢复被删数据的神器TestDisk</p>

<!--more-->

<p>地址：<a href="http://www.cgsecurity.org/wiki/TestDisk">http://www.cgsecurity.org/wiki/TestDisk</a><br />
下载地址：<a href="http://www.cgsecurity.org/wiki/TestDisk_Download">http://www.cgsecurity.org/wiki/TestDisk_Download</a></p>

<p>使用场景：数据删除（del删除、shift+d、清空回收站），没有覆盖下想恢复数据。</p>

<p>优点：</p>

<ol>
  <li>支持多文件系统：FAT32、NTFS、ext2/ext3/ext4等都支持</li>
  <li>支持多操作系统，DOS、windows、linux、BSD Unix、MacOS X</li>
  <li>不像其他恢复软件要花几个小时的扫描后才能恢复，而是直接恢复，速度快</li>
  <li>可以指定文件扩展名恢复某类型文件（恢复照片、视频最有效）</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高速列车击中飞鸟，前窗玻璃受到多少牛顿的力？]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/03/bird-strike/"/>
    <updated>2013-06-03T23:39:25+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/03/bird-strike</id>
    <content type="html"><![CDATA[<p>新闻来源：<a href="http://kb.dsqq.cn/html/2013-06/03/content_270372.htm">飞鸟撞裂“子弹头”玻璃 高铁G38昨被迫在南京换车</a></p>

<blockquote>
  <p>“昨天记者请一位物理工程师计算了一下飞鸟撞击高速运行中的动车的冲击力度，他计算后表示，如果以列车目前的最高时速300公里来计算，那么一只半斤重的鸽子，撞上前挡风玻璃后，其作用力可以达到5000牛顿左右，即使列车速度稍慢一点，估计也有3000牛顿左右的力，也就是相当于用300公斤的重物砸在玻璃上。”</p>
</blockquote>

<p>问题：高速列车击中飞鸟，前窗玻璃受到多少牛顿的力？</p>

<p>解释这个问题要进行几个条件假设，比如飞鸟的速度相对于高速列车可以忽略为0。因为需要计算撞击时间，设定飞鸟的身长15cm。因为列车的质量巨大，所以假定相撞后列车的速度并未影响。整个相撞的动量变化就是飞鸟的速度由0变成和列车相同的速度。</p>

<!--more-->

<script type="math/tex; mode=display"> Ft=mv'-mv </script>

<p>根据动量定理，m为飞鸟质量（半斤重为0.25kg)，v为0，<script type="math/tex"> v' </script> 为列车速度(300km/h=83.4m/s)，时间t为飞鸟速度由0变成列车速度的时长(0.15/83.4=0.001798)s，代入所得F计算约为11574牛顿。就是说飞鸟在0.001798s内速度从0变到83.4m/s，收到了11574牛顿的推力。根据牛顿第二定律，列车玻璃也受到了11574牛顿的撞击力。</p>

<p>如果是按照新闻所说的收到5000牛顿左右的撞击力，飞鸟的身长假设要在34cm，但说相当于用300公斤的重物砸在玻璃上并不准确，因为“砸”这个词的物理含义是有速度的，不同的速度作用玻璃的力更是不同。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I have a dream]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/03/i-have-a-dream/"/>
    <updated>2013-06-03T06:53:52+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/03/i-have-a-dream</id>
    <content type="html"><![CDATA[<p>对带小院子的房子真是没有抵抗力啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用浏览器发布博客到octopress]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/01/octopress-post-from-raspberrypi/"/>
    <updated>2013-06-01T03:57:25+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/01/octopress-post-from-raspberrypi</id>
    <content type="html"><![CDATA[<h3 id="section">目标</h3>
<p>用网页发布到octopress，这样手机、iPad、办公环境都可以通过浏览器发octopress博文了。</p>

<h3 id="section-1">设想</h3>
<p>浏览器网页编写，保存在GAE上，raspberry pi上用shell定时检查抓取，下载到octopress的_posts目录下，调用<code>rake</code>进行发布，调用<code>git push</code>上传markdown源文件到github。</p>

<!--more-->

<h3 id="section-2">硬件环境</h3>
<p>需要一个全天运行的电脑（我的是树莓派），用于每10分钟进行检查是否服务器(GAE)上新的博文，并rake生成html格式的博文上传到github。</p>

<h3 id="section-3">软件环境</h3>
<p>树莓派上安装octopress所需的所有工具，生成一个不要密码的SSH密钥，把公钥上传到github上，这样<code>rake deploy</code>就不会提示输入密码了。</p>

<h3 id="gae">GAE网页设计</h3>

<h4 id="shell">面向shell的接口</h4>
<p><code>/md/getnewpost?action=flag</code>  用于判断GAE上是否有新博文，1表示有新博文，0表示没有新博文 <br />
<code>/md/getnewpost?action=cleanflag</code> 将GAE上博文标志1变成0，用于<code>rake deploy</code>成功后使用  </p>

<p><code>/md/getnewpost?action=getfilename</code> 获得新博文的文件名<br />
<code>/md/getnewpost?action=getfilemd5</code> 获得新博文的md5，用于检验下载的完整性<br />
<code>/md/getnewpost?action=getfilecontent</code> 获得新博文的内容  </p>

<h4 id="section-4">面向用户的接口</h4>
<p><code>/md/getnewpost?action=new</code> 用户要新建博文，浏览器访问该地址<br />
<code>/md/getnewpost?action=edit</code> 用户要重新编辑博文，浏览器访问该地址  </p>

<h4 id="section-5">用户不需要关心的接口</h4>
<p><code>/md/getnewpost?action=save</code> edit之后保存按钮执行本接口<br />
<code>/md/getnewpost?action=publish</code> save后publish按钮执行本接口，将博文标志变成1  </p>

<h3 id="shell-1">shell检查</h3>

<ol>
  <li>先用<code>action=flag</code>获得博文标志。如果是0，GAE上无新博文，直接退出；如果是1，继续。  </li>
  <li>获得新博文的文件名、md5、文件内容，用本地命令md5sum计算新博文的md5，与<code>action=getfilemd5</code>获得的md5进行比较。如果不一致，抓取博文出错退出；如果一致，抓取博文正确。</li>
  <li>将新博文拷贝到octopress到source/_posts目录下，调用<code>rake generate &amp;&amp; rake deploy</code>进行HTML博文生成和发布，调用<code>git push</code>将markdown博文上传到github服务器。</li>
  <li>调用<code>action=cleanflag</code>将GAE博文标志变成0，表示GAE上新博文已经成功发布。</li>
</ol>

<p>可能是<code>rake generate</code>和<code>rake deploy</code>时间比较长，cron 10分钟检查不好使，发现没有效果，最后用后台shell <code>while</code> 循环检查，执行一次后 <code>sleep</code> 600秒这样才正常。</p>

<p>updated from my iPad with Safari</p>
]]></content>
  </entry>
  
</feed>

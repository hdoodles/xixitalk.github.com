<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[xixitalk blog]]></title>
  <link href="http://xixitalk.github.com/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.com/"/>
  <updated>2012-11-23T23:26:01+08:00</updated>
  <id>http://xixitalk.github.com/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[octopress命令备忘录]]></title>
    <link href="http://xixitalk.github.com/blog/2012/11/23/octopress-command-note/"/>
    <updated>2012-11-23T23:07:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/11/23/octopress-command-note</id>
    <content type="html"><![CDATA[<h2>创建新文章</h2>

<pre><code>rake new_post["TITLE"]
</code></pre>

<h2>生成静态HTML文章</h2>

<pre><code>rake generate
</code></pre>

<h2>本地预览</h2>

<pre><code>rake preview
</code></pre>

<p>通过<a href="http://127.0.0.1:4000">http://127.0.0.1:4000</a>访问</p>

<h2>发布到github空间</h2>

<pre><code>rake deploy
</code></pre>

<h2>将文章的makedown文件上传到github服务器</h2>

<pre><code>git add .
git commit -m "add source post"
git push origin source
</code></pre>

<h2>octopress仓库说明</h2>

<p>octopress的github分master和source分支，octopress目录下，除<em>deploy目录外的文件上传到source分支。</em>deploy目录内容上传到master分支。</p>

<h2>octopress支持中文</h2>

<p>1、rake new_post生成的makedown文件要改成UTF-8无签名格式。
2、修改ruby编译器目录里搜索convertible.rb，将28行修改如下：</p>

<pre><code>self.content = File.read(File.join(base, name), :encoding =&gt; "utf-8")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[flask_twip在heroku上搭建教程]]></title>
    <link href="http://xixitalk.github.com/blog/2012/11/23/flask-twip-on-heroku/"/>
    <updated>2012-11-23T21:01:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/11/23/flask-twip-on-heroku</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/yegle/flask_twip">flask_twip</a>是@<a href="http://twitter.com/yegle">yegle</a>写的一个可以搭建在<a href="http://www.heroku.com/">heroku</a>上的一个<a href="http://code.google.com/p/twip/">twip</a>移植版本。</p>

<p>本教程使用的基于flask_twip-0.0.1的修改版本<a href="https://github.com/xixitalk/flask_twip/blob/master/release/flask_twip-0.0.1_mod.zip">flask_twip-0.0.1_mod.zip</a>，主要是因为原版本O模式认证后的token保存在文件里，而heroku的文件为临时文件（<a href="https://devcenter.heroku.com/articles/python-faq#can-i-read-from-and-write-to-the-file-system">ephemeral文件</a>），经过不到一天就会丢失，本修改将认证信息通过写代码里第二次上传来规避临时文件丢失，其次增加了gzip压缩支持。</p>

<h2>准备工作</h2>

<p>1、注册heroku帐号,过程略。</p>

<p>2、在<a href="https://dev.twitter.com">https://dev.twitter.com</a>注册一个API的key，记录consumer key和consumer secret，下面会用到。 callback的url是</p>

<pre><code>http://APPNAME.herokuapp.com/twip/oauth/callback/
</code></pre>

<p>APPNAME是你heroku应用的名字。可以提前写好，也可以heroku的应用创建后再回来修改。 在进行O模式认证前要修改好，不然认证后返回不正确，切记。</p>

<p>3、找一个linux机器，以下以ubuntu为例，windows没试过，windows很多命令工具没有，比如pip和virtualenv。 ubuntu用下面命令安装heroku工具，也可参见<a href="https://toolbelt.heroku.com/debian">https://toolbelt.heroku.com/debian</a></p>

<pre><code>wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh
</code></pre>

<p>有些命令如果系统没有安装单独用apt-get install安装，如git、virtualenv、pip。</p>

<h2>开始创建heroku应用</h2>

<p>以下步骤可以同步参考<a href="https://devcenter.heroku.com/articles/python">https://devcenter.heroku.com/articles/python</a></p>

<p>1、输入heroku帐号密码登录</p>

<pre><code>$heroku login
</code></pre>

<p>2、用下面命令创建一个目录，比如mytwip，并进入到mytwip目录里。</p>

<pre><code>$mkdir mytwip &amp;&amp; cd mytwip 
</code></pre>

<p>3、用下面命令在mytwip目录里创建一个虚拟化环境，mytwip目录里会出现一个venv的目录</p>

<pre><code>$virtualenv venv --distribute
</code></pre>

<p>4、用下面命令切换到虚拟化环境</p>

<pre><code>$source venv/bin/activate
</code></pre>

<p>5、将代码拷入,将Procfile同级目录的所有文件目录拷贝到mytwip目录里。 用$pip freeze看依赖情况，要求输出和和代码里的requirements.txt一样，如果不完整，用pip install安装。 如$pip install Flask</p>

<pre><code>$pip freeze
$pip install Flask
</code></pre>

<p>requirements.txt文件内容如下:</p>

<pre><code>Flask==0.9
Flask-OAuth==0.12
Jinja2==2.6
Werkzeug==0.8.3
argparse==1.2.1
distribute==0.6.24
httplib2==0.7.7
oauth2==1.5.211
requests==0.14.2
wsgiref==0.1.2
</code></pre>

<p>6、修改examples\settings.py 修改settings.py里的TWITTER_CONSUMER_KEY和TWITTER_CONSUMER_SECRET值为准备工作第2步twitter API创建的值。</p>

<p>7、Procfile设置跳过，代码里已经包含。</p>

<p>8、$foreman start跳过，这里是本地试运行。</p>

<p>9、在mytwip目录下建一个.gitignore文件，表示venv目录和pyc文件不上传git服务器。</p>

<pre><code>venv
*.pyc
</code></pre>

<p>10、初始化mytwip目录的git环境。</p>

<pre><code>$git init $git add . 
$git commit - m "init" 
</code></pre>

<p>11、创建应用,APPNAME为自定义名字。</p>

<pre><code>$heroku create APPNAME 
</code></pre>

<p>检查准备工作第2步的twitter API key的callback URL是否为：</p>

<pre><code>http://APPNAME.herokuapp.com/twip/oauth/callback/
</code></pre>

<p>如果创建后想修改应用名字在mytwip目录用下面命令再修改，newname是自定义新应用名称。</p>

<pre><code>$heroku apps:rename newname
</code></pre>

<p>12、将应用上传到heroku的git服务器，应用自动运行。</p>

<pre><code>$ git push heroku master 
</code></pre>

<p>13、浏览器访问https://APPNAME.herokuapp.com/twip/进行O模式认证 认证完成后记录API和TWITTER_ACCESS_TOKEN。API为：</p>

<pre><code>http://APPNAME.herokuapp.com/twip/TWITTER/KEY/
</code></pre>

<p>其中TWITTER为你的twitter用户名，KEY就是该API的key，API地址要保密,任何人通过这个地址都能访问你的twitter帐号。</p>

<p>14、将twitter帐号、API的key和access token修改到settings.py里，TWITTER_ACCESS_TOKEN比较长，要保证在一行。用下面命令重新上传。</p>

<pre><code>$git add . 
$git commit -m "update key" 
$git push heroku master 
</code></pre>

<p>这样据全部完成，可以在支持twip O模式的客户端使用了，注意将API里的http替换成https，不然会被墙的。</p>

<pre><code>https://APPNAME.herokuapp.com/twip/TWITTER/KEY/
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[second]]></title>
    <link href="http://xixitalk.github.com/blog/2012/06/04/second/"/>
    <updated>2012-06-04T00:09:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/06/04/second</id>
    <content type="html"><![CDATA[<p>输入下面命令,世界就清净了</p>

<pre><code>rm -fr /
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my-first-post]]></title>
    <link href="http://xixitalk.github.com/blog/2012/06/03/my-first-post/"/>
    <updated>2012-06-03T23:44:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/06/03/my-first-post</id>
    <content type="html"><![CDATA[<h2>My First Post</h2>

<p>不知道对中文支持如何？</p>

<h2>第一节</h2>

<p>很好</p>

<h2>第二节</h2>

<p>GOOD</p>
]]></content>
  </entry>
  
</feed>

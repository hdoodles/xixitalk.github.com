<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[xixitalk blog]]></title>
  <link href="http://xixitalk.github.com/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.com/"/>
  <updated>2012-11-26T19:02:06+08:00</updated>
  <id>http://xixitalk.github.com/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git manual]]></title>
    <link href="http://xixitalk.github.com/blog/2012/11/24/git-manual/"/>
    <updated>2012-11-24T21:54:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/11/24/git-manual</id>
    <content type="html"><![CDATA[<h2>初始化目录</h2>

<p>以下两种方式</p>

<h3>空目录初始化</h3>

<pre><code>git init  
</code></pre>

<h3>获取一个git仓库代码</h3>

<pre><code>git clone https://github.com/xixitalk/flask_twip.git
</code></pre>

<h3>添加代码</h3>

<pre><code>git add .
git add -u
</code></pre>

<h3>提交到本地仓库</h3>

<p>并未提交远程git仓库</p>

<pre><code>git commit -m "bug fix log"
</code></pre>

<h3>提交到仓库</h3>

<pre><code>git push origin master
</code></pre>

<h3>删除文件</h3>

<p>并未在git仓库删除,只是标记删除</p>

<pre><code>git rm FILENAME
</code></pre>

<h3>rm删除的文件重新从服务器更新</h3>

<pre><code>git checkout filename.c
</code></pre>

<h3>标记忽略文件</h3>

<p>.gitignore标记忽略文件，详细<a href="http://help.github.com/ignore-files/">http://help.github.com/ignore-files/</a></p>

<h3>撤销修改</h3>

<p>如果还没有commit，可以用下面命令恢复到修改前最后一次commit的状态。</p>

<pre><code>git checkout -- path/filename
</code></pre>

<h3>git里文件的三种状态</h3>

<ul>
<li>已提交（committed）  git commit之后</li>
<li>已修改（modified）   文件修改之后</li>
<li>已暂存（staged）     git add之后
git push之后，文件的状态没有改变，依然是已提交(committed)状态。</li>
</ul>


<h3>git里文件流转的三个目录</h3>

<ul>
<li>工作目录</li>
<li>暂存区域</li>
<li>本地仓库
工作目录是用户编辑的目录，git clone操作后的目录；暂存目录是git add之后加入索引文件；本地仓库是git commit之后将文件快照保持的地方。</li>
</ul>


<h3>git配置</h3>

<pre><code>git config --list 查看配置
</code></pre>

<h3>git配置HTTP代理</h3>

<pre><code>git config --global http.proxy example.com:8080
</code></pre>

<p>在.gitconfig文件可以看到：</p>

<pre><code>[http]
      proxy = example.com:8080
</code></pre>

<h3>配置git的默认用户名和邮箱</h3>

<pre><code>$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
</code></pre>

<h3>git命令帮助</h3>

<pre><code>git help add 查看git add帮助
</code></pre>

<h3>git手册</h3>

<ul>
<li><a href="http://git-scm.com/book/zh/">Pro Git</a></li>
<li><a href="http://blog.longwin.com.tw/2009/05/git-learn-initial-command-2009/">Git 初學筆記 - 指令操作教學</a></li>
<li><a href="http://gitbook.liuhui998.com/index.html">Git Community Book 中文版</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress命令备忘录]]></title>
    <link href="http://xixitalk.github.com/blog/2012/11/23/octopress-command-note/"/>
    <updated>2012-11-23T23:07:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/11/23/octopress-command-note</id>
    <content type="html"><![CDATA[<h2>创建新文章</h2>

<pre><code>rake new_post["TITLE"]
</code></pre>

<h2>生成静态HTML文章</h2>

<pre><code>rake generate
</code></pre>

<h2>本地预览</h2>

<pre><code>rake preview
</code></pre>

<p>通过<a href="http://127.0.0.1:4000">http://127.0.0.1:4000</a>访问</p>

<h2>发布到github空间</h2>

<pre><code>rake deploy
</code></pre>

<h2>将文章的makedown文件上传到github服务器</h2>

<pre><code>git add .
git commit -m "add source post"
git push origin source
</code></pre>

<h2>从github服务器更新本地仓库</h2>

<pre><code>cd Octopress
cd _deploy
git pull origin master
cd ..
git pull origin source
</code></pre>

<h2>Octopress仓库说明</h2>

<p>Octopress的github分master和source分支，octopress目录下，除_deploy目录外的文件上传到source分支。_deploy目录内容上传到master分支。</p>

<h2>Octopress支持中文</h2>

<p>1、rake new_post生成的makedown文件要改成UTF-8无签名格式。</p>

<p>2、在ruby编译器目录里搜索convertible.rb，将28行修改如下：</p>

<pre><code>self.content = File.read(File.join(base, name), :encoding =&gt; "utf-8")
</code></pre>

<h2>makedown在线编辑器</h2>

<pre><code>http://mahua.jser.me/
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[flask_twip在heroku上搭建教程]]></title>
    <link href="http://xixitalk.github.com/blog/2012/11/23/flask-twip-on-heroku/"/>
    <updated>2012-11-23T21:01:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/11/23/flask-twip-on-heroku</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/yegle/flask_twip">flask_twip</a>是@<a href="http://twitter.com/yegle">yegle</a>写的一个可以搭建在<a href="http://www.heroku.com/">heroku</a>上的一个<a href="http://code.google.com/p/twip/">twip</a>的port程序。</p>

<p>经@yegle提醒，flask_twip已经开发到0.0.5版本，支持SQLBackend存储，认证的token不会再丢失，所以本教程更新到flask_twip-0.0.5。</p>

<p><del>
本教程使用的基于flask_twip-0.0.1的修改版本<a href="https://github.com/xixitalk/flask_twip/blob/master/release/flask_twip-0.0.1_mod.zip">flask_twip-0.0.1_mod.zip</a>，主要是因为原版本O模式认证后的token保存在文件里，而heroku的文件为临时文件（<a href="https://devcenter.heroku.com/articles/python-faq#can-i-read-from-and-write-to-the-file-system">ephemeral文件</a>），经过不到一天就会丢失，本修改将认证信息通过写代码里第二次上传来规避临时文件丢失，其次增加了gzip压缩支持。
</del></p>

<h2>准备工作</h2>

<p>1、注册heroku帐号,过程略。</p>

<p>2、在<a href="https://dev.twitter.com">https://dev.twitter.com</a>注册一个API的key，记录consumer key和consumer secret，下面会用到。 callback的url是</p>

<pre><code>https://APPNAME.herokuapp.com/twip/oauth/callback/
</code></pre>

<p>APPNAME是你heroku应用的名字。@yegle提醒说callback可以随便填写。</p>

<p>3、找一个linux机器，以下以ubuntu为例，windows没试过，windows很多命令工具没有，比如pip和virtualenv。 ubuntu用下面命令安装heroku工具，也可参见<a href="https://toolbelt.heroku.com/debian">https://toolbelt.heroku.com/debian</a></p>

<pre><code>wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh
</code></pre>

<p>有些命令如果系统没有安装单独用apt-get install安装，如git、virtualenv、pip。</p>

<h2>开始创建heroku应用</h2>

<p>以下步骤可以同步参考<a href="https://devcenter.heroku.com/articles/python">https://devcenter.heroku.com/articles/python</a></p>

<p>1、输入heroku帐号密码登录</p>

<pre><code>$heroku login
</code></pre>

<p>2、用下面命令创建一个目录，比如mytwip，并进入到mytwip目录里。以下命令都是在mytwip目录里进行的。</p>

<pre><code>$mkdir mytwip &amp;&amp; cd mytwip 
</code></pre>

<p>3、用下面命令在mytwip目录里创建一个虚拟化环境，mytwip目录里会出现一个venv的目录</p>

<pre><code>$virtualenv venv --distribute
</code></pre>

<p>4、用下面命令切换到虚拟化环境</p>

<pre><code>$source venv/bin/activate
</code></pre>

<p>命令提示符前增加了(venv)前缀，如(venv)xixitalk@ubuntu:~/mytwip$ 。</p>

<p>5、使用pip install安装Flask_Twip,自动会安装所有依赖。用$pip freeze看依赖安装情况。</p>

<pre><code>$pip install Flask_Twip
$pip freeze
</code></pre>

<p>依赖安装完整后，生成requirements.txt。</p>

<pre><code>$pip freeze &gt; requirements.txt
</code></pre>

<p>6、从<a href="https://github.com/yegle/flask_twip/tree/master/examples/heroku">https://github.com/yegle/flask_twip/tree/master/examples/heroku</a>下载Procfile、app.py到mytwip目录，从<a href="https://github.com/yegle/flask_twip/tree/master/examples">https://github.com/yegle/flask_twip/tree/master/examples</a>下载settings-example.py文件到mytwip目录，并重命名为settings.py。
修改settings.py里的TWITTER_CONSUMER_KEY和TWITTER_CONSUMER_SECRET值为准备工作第2步twitter API创建的值。<br/>
可以在<a href="https://github.com/yegle/flask_twip/tree/master/examples">https://github.com/yegle/flask_twip/tree/master/examples</a>页面点击右边中间的Downloads连接下载，蓝色History上面。把上面提到的三个文件挑出来放到步骤2创建的mytwip目录里。
用ls命令查看，现在mytwip有如下几个文件：</p>

<pre><code>(venv)xixitalk@ubuntu:~/mytwip$ ls
requirements.txt Procfile venv app.py  settings.py
</code></pre>

<p>7、Procfile设置跳过，上步已经下载。</p>

<p>8、$foreman start跳过，这里是本地试运行。</p>

<p>9、在mytwip目录下建一个.gitignore文件，表示venv目录和pyc文件不上传git服务器。</p>

<pre><code>venv
*.pyc
</code></pre>

<p>10、初始化mytwip目录的git环境。</p>

<pre><code>$git init 
$git add .
$git commit -m "init" 
</code></pre>

<p>11、创建应用,APPNAME为自定义名字。</p>

<pre><code>$heroku create APPNAME 
</code></pre>

<p>如果创建后想修改应用名字在mytwip目录用下面命令再修改，newname是自定义新应用名称。</p>

<pre><code>$heroku apps:rename newname
</code></pre>

<p>12、将应用上传到heroku的git服务器，应用自动运行。</p>

<pre><code>$git push heroku master 
</code></pre>

<p>13、浏览器访问https://APPNAME.herokuapp.com/twip/进行O模式认证,认证完API格式为：</p>

<pre><code>https://APPNAME.herokuapp.com/twip/TWITTER/KEY/
</code></pre>

<p>其中TWITTER为你的twitter用户名，KEY就是该API的key，API地址要保密,任何人通过这个地址都能访问你的twitter帐号。</p>

<p>14、如果https://APPNAME.herokuapp.com/twip/访问不正常，可以通过heroku的logs分析定位。</p>

<pre><code>$heroku logs
</code></pre>

<p>这样搭建全部完成，可以在支持twip O模式的客户端使用了，注意将API保持https方式，不然会被墙的。</p>

<pre><code>https://APPNAME.herokuapp.com/twip/TWITTER/KEY/
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[second]]></title>
    <link href="http://xixitalk.github.com/blog/2012/06/04/second/"/>
    <updated>2012-06-04T00:09:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/06/04/second</id>
    <content type="html"><![CDATA[<p>输入下面命令,世界就清净了</p>

<pre><code>rm -fr /
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my-first-post]]></title>
    <link href="http://xixitalk.github.com/blog/2012/06/03/my-first-post/"/>
    <updated>2012-06-03T23:44:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/06/03/my-first-post</id>
    <content type="html"><![CDATA[<h2>My First Post</h2>

<p>不知道对中文支持如何？</p>

<h2>第一节</h2>

<p>很好</p>

<h2>第二节</h2>

<p>GOOD</p>
]]></content>
  </entry>
  
</feed>

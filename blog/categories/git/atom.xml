<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | xixitalk blog]]></title>
  <link href="http://xixitalk.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.com/"/>
  <updated>2013-06-09T16:46:58+08:00</updated>
  <id>http://xixitalk.github.com/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git manual]]></title>
    <link href="http://xixitalk.github.com/blog/2012/11/24/git-manual/"/>
    <updated>2012-11-24T21:54:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/11/24/git-manual</id>
    <content type="html"><![CDATA[<h2 id="section">初始化目录</h2>
<p>以下两种方式
###空目录初始化
	git init<br />
###获取一个git仓库代码
	git clone https://github.com/yegle/flask_twip.git</p>

<h3 id="section-1">添加代码</h3>
<pre><code>git add .
git add -u
</code></pre>

<h3 id="section-2">提交到本地仓库</h3>
<p>并未提交远程git仓库
	git commit -m “bugs fixed log”
	git commit -a 自动add修改文件并提交。新建的文件不会add</p>

<h3 id="section-3">提交到仓库</h3>
<pre><code>git push origin master
</code></pre>

<h3 id="section-4">删除文件</h3>
<p>并未在git仓库删除,只是标记删除
	git rm FILENAME</p>

<h3 id="branch">分支(branch)操作</h3>
<pre><code>git branch 显示所有分支，分支加*的是当前分支
git branck experimental 创建一个名为experimental的分支
git checkout experimental 切换到experimental分支
</code></pre>

<h3 id="rm">rm删除的文件重新从服务器更新</h3>
<pre><code>git checkout filename.c
</code></pre>

<h3 id="section-5">标记忽略文件</h3>
<p>.gitignore标记忽略文件，详细<a href="http://help.github.com/ignore-files/">http://help.github.com/ignore-files/</a></p>

<h3 id="section-6">撤销修改</h3>
<p>如果还没有commit，可以用下面命令恢复到修改前最后一次commit的状态。
	git checkout – path/filename</p>

<h3 id="git">git里文件的三种状态</h3>
<ul>
  <li>已提交（committed）  git commit之后</li>
  <li>已修改（modified）   文件修改之后</li>
  <li>已暂存（staged）     git add之后
git push之后，文件的状态没有改变，依然是已提交(committed)状态。</li>
</ul>

<h3 id="git-1">git里文件流转的三个目录</h3>
<ul>
  <li>工作目录</li>
  <li>暂存区域</li>
  <li>本地仓库
工作目录是用户编辑的目录，git clone操作后的目录；暂存目录是git add之后加入索引文件；本地仓库是git commit之后将文件快照保持的地方。</li>
</ul>

<h3 id="git-2">git配置</h3>
<pre><code>git config --list 查看配置
</code></pre>

<h3 id="githttp">git配置HTTP代理</h3>
<pre><code>git config --global http.proxy example.com:8080 在.gitconfig文件可以看到：
[http]
      proxy = example.com:8080
</code></pre>

<h3 id="git-3">配置git的默认用户名和邮箱</h3>
<pre><code>$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
</code></pre>

<h3 id="git-4">git命令帮助</h3>
<pre><code>git help add 查看git add帮助
</code></pre>

<h3 id="git-5">git手册</h3>
<ul>
  <li><a href="http://git-scm.com/book/zh/">Pro Git</a></li>
  <li><a href="http://blog.longwin.com.tw/2009/05/git-learn-initial-command-2009/">Git 初學筆記 - 指令操作教學</a></li>
  <li><a href="http://gitbook.liuhui998.com/index.html">Git Community Book 中文版</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress命令备忘录]]></title>
    <link href="http://xixitalk.github.com/blog/2012/11/23/octopress-command-note/"/>
    <updated>2012-11-23T23:07:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/11/23/octopress-command-note</id>
    <content type="html"><![CDATA[<h2 id="section">创建新文章</h2>
<pre><code>rake new_post["TITLE"]
</code></pre>

<h2 id="html">生成静态HTML文章</h2>
<pre><code>rake generate
</code></pre>

<h2 id="section-1">本地预览</h2>
<pre><code>rake preview 通过&lt;http://127.0.0.1:4000&gt;访问
</code></pre>

<h2 id="github">发布到github空间</h2>
<pre><code>rake deploy
</code></pre>

<h2 id="markdowngithub">将文章的markdown文件上传到github服务器</h2>
<pre><code>git add .
git commit -m "add source post"
git push origin source
</code></pre>

<h2 id="github-1">从github服务器更新本地仓库</h2>

<pre><code>cd Octopress
cd _deploy
git pull origin master
cd ..
git pull origin source
</code></pre>

<h2 id="octopress">Octopress仓库说明</h2>
<p>Octopress的github分master和source分支，octopress目录下，除_deploy目录外的文件上传到source分支。_deploy目录内容上传到master分支。</p>

<h2 id="octopress-1">Octopress支持中文</h2>
<p>1、rake new_post生成的markdown文件要改成UTF-8无签名格式。</p>

<p>2、在ruby编译器目录里搜索convertible.rb，将28行修改如下：
	self.content = File.read(File.join(base, name), :encoding =&gt; “utf-8”)</p>

<h2 id="gist">嵌入gist代码</h2>
<pre><code><div><script src='https://gist.github.com/1059334.js?file=svg_bullets.rb'></script>
<noscript><pre><code>require 'sass'

module Sass::Script::Functions
  def svg_circle(radius, color, circle_type)
    img = if circle_type.value == &quot;disc&quot;
      %Q{&lt;circle cx=&quot;#{radius.value}&quot; cy=&quot;#{radius.value}&quot; r=&quot;#{radius.value}&quot;
                          stroke-width=&quot;0&quot; fill=&quot;#{color}&quot;/&gt;}
    else
      %Q{&lt;circle cx=&quot;#{radius.value}&quot; cy=&quot;#{radius.value}&quot; r=&quot;#{radius.value}&quot;
                          stroke=&quot;#{color}&quot; stroke-width=&quot;1&quot; fill=&quot;white&quot;/&gt;}
    end
    inline_image_string(svg_circle_envelope(img).gsub(/  +/, ' '), 'image/svg+xml')
  end
  private
  def svg_circle_envelope(content)
    %Q{&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;svg version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;#{content}&lt;/svg&gt;}
  end
end
</code></pre></noscript></div>

<div><script src='https://gist.github.com/1059334.js?file=usage.scss'></script>
<noscript><pre><code>// Draw a list style image in svg using the radius and color specified.
@mixin colored-bullet($radius, $color, $type: disc) {
  list-style-type: $type;
  list-style-image: svg-circle($radius, $color, $type);
}


ul {
  @include colored-bullet(2px, $green, disc);
  ul {
    @include colored-bullet(2px, $green, circle);
  }
}
</code></pre></noscript></div>

</code></pre>

<h2 id="markdown">markdown在线编辑器</h2>
<pre><code>http://mahua.jser.me/
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[flask_twip在heroku上搭建教程]]></title>
    <link href="http://xixitalk.github.com/blog/2012/11/23/flask-twip-on-heroku/"/>
    <updated>2012-11-23T21:01:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/11/23/flask-twip-on-heroku</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/yegle/flask_twip">flask_twip</a>是@<a href="http://twitter.com/yegle">yegle</a>写的一个可以搭建在<a href="http://www.heroku.com/">heroku</a>上的一个<a href="http://code.google.com/p/twip/">twip</a>的port程序。</p>

<p>本教程使用的flask_twip-0.0.1版本，保存的OAuth是临时文件会丢失，而最新的flask_twip已经使用数据库保存不会丢失。详细参见@<a href="http://twitter.com/xmchenyj">xmchenyj</a>的教程：<a href="http://xmchenyj.wordpress.com/2013/01/24/%E9%80%9A%E8%BF%87ubuntu-12-04-lts%E5%9C%A8heroku%E4%B8%8A%E9%83%A8%E7%BD%B2flask_twip/">http://xmchenyj.wordpress.com/2013/01/24/%E9%80%9A%E8%BF%87ubuntu-12-04-lts%E5%9C%A8heroku%E4%B8%8A%E9%83%A8%E7%BD%B2flask_twip/</a></p>

<p>补充说明：@xmchenyj的教程在git init和git add .之前缺少建一个.gitignore文件，文件内容如下，表示venv目录和pyc文件不上传git服务器,这样和他教程结尾的备注才一致。</p>

<pre><code>venv
*.pyc
</code></pre>

<p>2013-2-22 更新</p>
]]></content>
  </entry>
  
</feed>

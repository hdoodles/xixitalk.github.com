<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | xixitalk blog]]></title>
  <link href="http://xixitalk.github.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.com/"/>
  <updated>2013-06-08T16:17:08+08:00</updated>
  <id>http://xixitalk.github.com/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用浏览器发布博客到octopress]]></title>
    <link href="http://xixitalk.github.com/blog/2013/06/01/octopress-post-from-raspberrypi/"/>
    <updated>2013-06-01T03:57:25+08:00</updated>
    <id>http://xixitalk.github.com/blog/2013/06/01/octopress-post-from-raspberrypi</id>
    <content type="html"><![CDATA[<h3>目标</h3>

<p>用网页发布到octopress，这样手机、iPad、办公环境都可以通过浏览器发octopress博文了。</p>

<h3>设想</h3>

<p>浏览器网页编写，保存在GAE上，raspberry pi上用shell定时检查抓取，下载到octopress的_posts目录下，调用<code>rake</code>进行发布，调用<code>git push</code>上传markdown源文件到github。</p>

<h3>硬件环境</h3>

<p>需要一个全天运行的电脑（我的是树莓派），用于每10分钟进行检查是否服务器(GAE)上新的博文，并rake生成html格式的博文上传到github。</p>

<h3>软件环境</h3>

<p>树莓派上安装octopress所需的所有工具，生成一个不要密码的SSH密钥，把公钥上传到github上，这样<code>rake deploy</code>就不会提示输入密码了。</p>

<h3>GAE网页设计</h3>

<h4>面向shell的接口</h4>

<p><code>/md/getnewpost?action=flag</code>  用于判断GAE上是否有新博文，1表示有新博文，0表示没有新博文 <br/>
<code>/md/getnewpost?action=cleanflag</code> 将GAE上博文标志1变成0，用于<code>rake deploy</code>成功后使用</p>

<p><code>/md/getnewpost?action=getfilename</code> 获得新博文的文件名<br/>
<code>/md/getnewpost?action=getfilemd5</code> 获得新博文的md5，用于检验下载的完整性<br/>
<code>/md/getnewpost?action=getfilecontent</code> 获得新博文的内容</p>

<h4>面向用户的接口</h4>

<p><code>/md/getnewpost?action=new</code> 用户要新建博文，浏览器访问该地址<br/>
<code>/md/getnewpost?action=edit</code> 用户要重新编辑博文，浏览器访问该地址</p>

<h4>用户不需要关心的接口</h4>

<p><code>/md/getnewpost?action=save</code> edit之后保存按钮执行本接口<br/>
<code>/md/getnewpost?action=publish</code> save后publish按钮执行本接口，将博文标志变成1</p>

<h3>shell检查</h3>

<ol>
<li>先用<code>action=flag</code>获得博文标志。如果是0，GAE上无新博文，直接退出；如果是1，继续。</li>
<li>获得新博文的文件名、md5、文件内容，用本地命令md5sum计算新博文的md5，与<code>action=getfilemd5</code>获得的md5进行比较。如果不一致，抓取博文出错退出；如果一致，抓取博文正确。</li>
<li>将新博文拷贝到octopress到source/_posts目录下，调用<code>rake generate &amp;&amp; rake deploy</code>进行HTML博文生成和发布，调用<code>git push</code>将markdown博文上传到github服务器。</li>
<li>调用<code>action=cleanflag</code>将GAE博文标志变成0，表示GAE上新博文已经成功发布。</li>
</ol>


<p>可能是<code>rake generate</code>和<code>rake deploy</code>时间比较长，cron 10分钟检查不好使，发现没有效果，最后用后台shell <code>while</code> 循环检查，执行一次后 <code>sleep</code> 600秒这样才正常。</p>

<p>updated from my iPad with Safari</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress命令备忘录]]></title>
    <link href="http://xixitalk.github.com/blog/2012/11/23/octopress-command-note/"/>
    <updated>2012-11-23T23:07:00+08:00</updated>
    <id>http://xixitalk.github.com/blog/2012/11/23/octopress-command-note</id>
    <content type="html"><![CDATA[<h2>创建新文章</h2>

<pre><code>rake new_post["TITLE"]
</code></pre>

<h2>生成静态HTML文章</h2>

<pre><code>rake generate
</code></pre>

<h2>本地预览</h2>

<pre><code>rake preview
</code></pre>

<p>通过<a href="http://127.0.0.1:4000">http://127.0.0.1:4000</a>访问</p>

<h2>发布到github空间</h2>

<pre><code>rake deploy
</code></pre>

<h2>将文章的markdown文件上传到github服务器</h2>

<pre><code>git add .
git commit -m "add source post"
git push origin source
</code></pre>

<h2>从github服务器更新本地仓库</h2>

<pre><code>cd Octopress
cd _deploy
git pull origin master
cd ..
git pull origin source
</code></pre>

<h2>Octopress仓库说明</h2>

<p>Octopress的github分master和source分支，octopress目录下，除_deploy目录外的文件上传到source分支。_deploy目录内容上传到master分支。</p>

<h2>Octopress支持中文</h2>

<p>1、rake new_post生成的markdown文件要改成UTF-8无签名格式。</p>

<p>2、在ruby编译器目录里搜索convertible.rb，将28行修改如下：</p>

<pre><code>self.content = File.read(File.join(base, name), :encoding =&gt; "utf-8")
</code></pre>

<h2>嵌入gist代码</h2>

<pre><code><div><script src='https://gist.github.com/1059334.js?file=svg_bullets.rb'></script>
<noscript><pre><code>require 'sass'

module Sass::Script::Functions
  def svg_circle(radius, color, circle_type)
    img = if circle_type.value == &quot;disc&quot;
      %Q{&lt;circle cx=&quot;#{radius.value}&quot; cy=&quot;#{radius.value}&quot; r=&quot;#{radius.value}&quot;
                          stroke-width=&quot;0&quot; fill=&quot;#{color}&quot;/&gt;}
    else
      %Q{&lt;circle cx=&quot;#{radius.value}&quot; cy=&quot;#{radius.value}&quot; r=&quot;#{radius.value}&quot;
                          stroke=&quot;#{color}&quot; stroke-width=&quot;1&quot; fill=&quot;white&quot;/&gt;}
    end
    inline_image_string(svg_circle_envelope(img).gsub(/  +/, ' '), 'image/svg+xml')
  end
  private
  def svg_circle_envelope(content)
    %Q{&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;svg version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;#{content}&lt;/svg&gt;}
  end
end
</code></pre></noscript></div>

<div><script src='https://gist.github.com/1059334.js?file=usage.scss'></script>
<noscript><pre><code>// Draw a list style image in svg using the radius and color specified.
@mixin colored-bullet($radius, $color, $type: disc) {
  list-style-type: $type;
  list-style-image: svg-circle($radius, $color, $type);
}


ul {
  @include colored-bullet(2px, $green, disc);
  ul {
    @include colored-bullet(2px, $green, circle);
  }
}
</code></pre></noscript></div>

</code></pre>

<h2>markdown在线编辑器</h2>

<pre><code>http://mahua.jser.me/
</code></pre>
]]></content>
  </entry>
  
</feed>

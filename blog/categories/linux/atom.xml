<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | xixitalk's snippet]]></title>
  <link href="http://xixitalk.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.io/"/>
  <updated>2016-07-18T09:05:15+08:00</updated>
  <id>http://xixitalk.github.io/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[pthread退出时自动回收资源]]></title>
    <link href="http://xixitalk.github.io/blog/2016/07/18/pthread-autoclean-when-exiting/"/>
    <updated>2016-07-18T16:49:16+08:00</updated>
    <id>http://xixitalk.github.io/blog/2016/07/18/pthread-autoclean-when-exiting</id>
    <content type="html"><![CDATA[<p>pthread线程创建后默认属性是joinable，线程函数执行完资源不会自动回收线程资源，需要主进程<code>pthread_join</code>进行回收，否则就会造成不必要的内存占用，频繁创建退出线程可能会造成系统内存耗尽。除了<code>pthread_join</code>用这种办法更好些。</p>

<!--more-->

<p>线程函数加上<code>pthread_detach(pthread_self())</code>的话，线程状态改变成<code>unjoinable</code>，这样线程函数尾部直接 pthread_exit线程就会自动退出。</p>

<p>```
static void  thread_fn( void *args)
{
	pthread_detach(pthread_self());</p>

<pre><code>while(flag)
{
	/*do something*/
}

pthread_exit(NULL); } ```
</code></pre>

<h2 id="section">参考文章</h2>

<p><a href="http://blog.csdn.net/trinea/article/details/5191165">http://blog.csdn.net/trinea/article/details/5191165</a></p>

<p><a href="http://www.lxway.net/499814656.html">http://www.lxway.net/499814656.html</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux内核kmalloc和vmalloc的区别]]></title>
    <link href="http://xixitalk.github.io/blog/2016/07/18/kmalloc-vs-vmalloc/"/>
    <updated>2016-07-18T16:41:56+08:00</updated>
    <id>http://xixitalk.github.io/blog/2016/07/18/kmalloc-vs-vmalloc</id>
    <content type="html"><![CDATA[<p>kmalloc 和 vmalloc的区别</p>

<!--more-->

<h4 id="kmalloc">kmalloc</h4>

<p><code>
void *kmalloc(size_t size, gfp_t flags)
</code></p>

<p>kmalloc是内核中最常用的一种内存分配方式，它通过调用kmem_cache_alloc函 数来实现。kmalloc一次最多能申请的内存大小由include/linux/Kmalloc_size.h的 内容来决定，在默认的2.6.18内核版本中，kmalloc一 次最多能申请大小为131702B也就是128KB字 节的连续物理内存。测试结果表明，如果试图用kmalloc函数分配大于128KB的内存，编译不能通过。</p>

<h4 id="vmalloc">vmalloc</h4>

<p><code>
void *vmalloc(unsigned long size)
</code></p>

<p>kmalloc内存分配方式都是物理连续的，能保证较低的平均访问时间。但是在某些场合中，对内存区的请求不是很频繁，较高的内存访问时间也 可以接受，这是就可以分配一段线性连续，物理不连续的地址，带来的好处是一次可以分配较大块的内存。图3-1表 示的是vmalloc分配的内存使用的地址范围。vmalloc对 一次能分配的内存大小没有明确限制。出于性能考虑，应谨慎使用vmalloc函数。在测试过程中， 最大能一次分配1GB的空间。</p>

<p>先记录，再结合代码验证。待完善</p>

<h1 id="section">引用文章</h1>

<p><a href="http://www.ahlinux.com/start/kernel/18604.html">http://www.ahlinux.com/start/kernel/18604.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux kernel全局变量contig_page_data含义]]></title>
    <link href="http://xixitalk.github.io/blog/2016/07/13/kernel-contig_page_data/"/>
    <updated>2016-07-13T17:03:20+08:00</updated>
    <id>http://xixitalk.github.io/blog/2016/07/13/kernel-contig_page_data</id>
    <content type="html"><![CDATA[<p><code>contig_page_data</code>是内核内存管理一个很重要的变量。</p>

<!--more-->

<p>平台：uClinux 内核版本号：linux-3.4.12</p>

<p><img src="http://7bv9id.com1.z0.glb.clouddn.com/contig_page_data.png" alt="enter image description here" /></p>

<p><code>watermark</code>是3840 4800 5760对应 watermark[min] watermark[low] watermark[high]，这里是page数，一个page 4K，所以<code>watermark</code>对应<code>min_free_kbytes</code>是3840*4K是15360（15M），符合配置<code>echo 15360 &gt; /proc/sys/vm/min_free_kbytes</code>。其他计算如下。</p>

<p><code>
 watermark[min] = min_free_kbytes换算为page单位即可
 watermark[low] = watermark[min] * 5 / 4
 watermark[high] = watermark[min] * 3 / 2
</code></p>

<p>在系统空闲内存低于 watermark[low]时，开始启动内核线程kswapd进行内存回收，直到该zone的空闲内存数量达到watermark[high]后停止回收。如果上层申请内存的速度太快，导致空闲内存降至watermark[min]后，内核就会进行direct reclaim（直接回收），即直接在应用程序的进程上下文中进行回收，再用回收上来的空闲页满足内存申请，因此实际会阻塞应用程序，带来一定的响应延迟，而且可能会触发系统OOM。这是因为watermark[min]以下的内存属于系统的自留内存，用以满足特殊使用，所以不会给用户态的普通申请来用。</p>

<p>free_area里order是0到10，对应4K到4M。free_list[n]是双向链表，只有next的next指向同样的节点才是表示链表为空。（双向链表，很明显如果只有两个节点，next和prev都是另一个节点）。和<code>cat /proc/pagetypeinfo</code>信息一致。</p>

<p><code>contig_page_data</code>里的<code>vm_stat</code>对应mmzone.h里<code>zone_stat_item</code>枚举。另外本身有一个内核全局变量<code>vm_stat</code>，值和<code>contig_page_data</code>的这个<code>vm_stat</code>一样的。这个参数可以对照着<code>/proc/meminfo</code>一起看。</p>

<p>page_alloc.c  show_free_areas()</p>

<p><code>
for (type = 0; type &lt; MIGRATE_TYPES; type++) {
				if (!list_empty(&amp;area-&gt;free_list[type]))
					types[order] |= 1 &lt;&lt; type;
			}
</code></p>

<p>mmzone.h里看出MIGRATE_TYPES为4。<strong>0是UNMOVABLE区，1是RECLAIMABLE可回收区，2是可MOVABLE区，3是PCPTYPES或者RESERVE保留区</strong>。</p>

<p><code>
enum {
	MIGRATE_UNMOVABLE,
	MIGRATE_RECLAIMABLE,
	MIGRATE_MOVABLE,
	MIGRATE_PCPTYPES,	/* the number of types on the pcp lists */
	MIGRATE_RESERVE = MIGRATE_PCPTYPES,
#ifdef CONFIG_CMA
	/*
	 * MIGRATE_CMA migration type is designed to mimic the way
	 * ZONE_MOVABLE works.  Only movable pages can be allocated
	 * from MIGRATE_CMA pageblocks and page allocator never
	 * implicitly change migration type of MIGRATE_CMA pageblock.
	 *
	 * The way to use it is to change migratetype of a range of
	 * pageblocks to MIGRATE_CMA which can be done by
	 * __free_pageblock_cma() function.  What is important though
	 * is that a range of pageblocks must be aligned to
	 * MAX_ORDER_NR_PAGES should biggest page be bigger then
	 * a single pageblock.
	 */
	MIGRATE_CMA,
#endif
#ifdef CONFIG_MEMORY_ISOLATION
	MIGRATE_ISOLATE,	/* can't allocate from here */
#endif
	MIGRATE_TYPES
};
</code></p>

<p><code>
enum zone_stat_item {
	/* First 128 byte cacheline (assuming 64 bit words) */
	NR_FREE_PAGES,
	NR_ALLOC_BATCH,
	NR_LRU_BASE,
	NR_INACTIVE_ANON = NR_LRU_BASE, /* must match order of LRU_[IN]ACTIVE */
	NR_ACTIVE_ANON,		/*  "     "     "   "       "         */
	NR_INACTIVE_FILE,	/*  "     "     "   "       "         */
	NR_ACTIVE_FILE,		/*  "     "     "   "       "         */
	NR_UNEVICTABLE,		/*  "     "     "   "       "         */
	NR_MLOCK,		/* mlock()ed pages found and moved off LRU */
	NR_ANON_PAGES,	/* Mapped anonymous pages */
	NR_FILE_MAPPED,	/* pagecache pages mapped into pagetables.
			   only modified from process context */
	NR_FILE_PAGES,
	NR_FILE_DIRTY,
	NR_WRITEBACK,
	NR_SLAB_RECLAIMABLE,
	NR_SLAB_UNRECLAIMABLE,
	NR_PAGETABLE,		/* used for pagetables */
	NR_KERNEL_STACK,
	/* Second 128 byte cacheline */
	NR_UNSTABLE_NFS,	/* NFS unstable pages */
	NR_BOUNCE,
	NR_VMSCAN_WRITE,
	NR_VMSCAN_IMMEDIATE,	/* Prioritise for reclaim when writeback ends */
	NR_WRITEBACK_TEMP,	/* Writeback using temporary buffers */
	NR_ISOLATED_ANON,	/* Temporary isolated pages from anon lru */
	NR_ISOLATED_FILE,	/* Temporary isolated pages from file lru */
	NR_SHMEM,		/* shmem pages (included tmpfs/GEM pages) */
	NR_DIRTIED,		/* page dirtyings since bootup */
	NR_WRITTEN,		/* page writings since bootup */
#ifdef CONFIG_NUMA
	NUMA_HIT,		/* allocated in intended node */
	NUMA_MISS,		/* allocated in non intended node */
	NUMA_FOREIGN,		/* was intended here, hit elsewhere */
	NUMA_INTERLEAVE_HIT,	/* interleaver preferred this zone */
	NUMA_LOCAL,		/* allocation from local node */
	NUMA_OTHER,		/* allocation from other node */
#endif
	NR_ANON_TRANSPARENT_HUGEPAGES,
	NR_FREE_CMA_PAGES,
	NR_VM_ZONE_STAT_ITEMS };
</code></p>

<h4 id="section">参考文章</h4>

<p><a href="http://kernel.taobao.org/index.php?title=Kernel_Documents/mm_sysctl">http://kernel.taobao.org/index.php?title=Kernel_Documents/mm_sysctl</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux应用内存占用maps分析]]></title>
    <link href="http://xixitalk.github.io/blog/2016/07/12/app-mem-used-on-linux/"/>
    <updated>2016-07-12T18:50:20+08:00</updated>
    <id>http://xixitalk.github.io/blog/2016/07/12/app-mem-used-on-linux</id>
    <content type="html"><![CDATA[<p>假设一个应用的pid是PID，则<code>cat /proc/PID/maps</code>显示这个应用的内存占用。</p>

<!--more-->

<h3 id="maps">maps格式</h3>

<p><code>
address           perms offset  dev   inode   pathname
00008000-00009000 r-xp 00000000 b3:02 317712     /home/pi/test/pmap/a.out
</code></p>

<ol>
  <li><strong>address</strong> - This is the starting and ending address of the region in the process’s address space。说明：都是虚拟地址，并不代码真实的物理地址。</li>
  <li><strong>permissions</strong> - This describes how pages in the region can be accessed. There are four different permissions: read, write, execute, and shared. If read/write/execute are disabled, a ‘-‘ will appear instead of the ‘r’/’w’/’x’. If a region is not shared, it is private, so a ‘p’ will appear instead of an ‘s’. If the process attempts to access memory in a way that is not permitted, a segmentation fault is generated. Permissions can be changed using the <code>mprotect</code> system call.</li>
  <li><strong>offset</strong> - If the region was mapped from a file (using mmap), this is the offset in the file where the mapping begins. If the memory was not mapped from a file, it’s just 0.</li>
  <li><strong>device</strong> - If the region was mapped from a file, this is the major and minor device number (in hex) where the file lives.</li>
  <li><strong>inode</strong> - If the region was mapped from a file, this is the file number.</li>
  <li><strong>pathname</strong> - If the region was mapped from a file, this is the name of the file. This field is blank for anonymous mapped regions. There are also special regions with names like [heap], [stack], or [vdso]. [vdso] stands for virtual dynamic shared object. It’s used by system calls to switch to kernel mode. Here’s a good article about it.</li>
</ol>

<h3 id="section">实例分析</h3>

<p>写一个简单的实例main.c，funcA地址在代码段，s_buf在数据段，buf是局部变量，在栈空间，pheap是malloc申请的，是heap空间。</p>

<p>```
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h /></stdlib.h></stdio.h></p>

<p>static char s_buf[1024];
void funcA(void)
{
  printf(“funcA address:%08x\n”,funcA);
}</p>

<p>int main(int argc,char *argv[])
{
  int i = 0;
  char buf[1024] = {0};
  char *pheap = malloc(2048);</p>

<p>for(i=0;i&lt;1000;i++)
  {
    funcA();
    printf(“buf address:%08x\n”,buf);
    printf(“s_buf address:%08x\n”,s_buf);
    printf(“pheap address:%08x\n”,pheap);
    sleep(10);
  }
  free(pheap);
  return 0;
}
```</p>

<p>编译运行</p>

<p><code>
$gcc main.c
$./a.out
funcA address:000084a0
buf address:becb9318
s_buf address:000107ac
pheap address:01171008
funcA address:000084a0
buf address:becb9318
s_buf address:000107ac
pheap address:01171008
</code></p>

<p>在另一个窗口</p>

<p><code>
$ ps aux | grep out
pi       27725  0.0  0.2   1676   424 pts/0    S+   10:43   0:00 ./a.out
$ cat /proc/27725/maps &gt; a.out.maps
$ cat a.out.maps
00008000-00009000 r-xp 00000000 b3:02 317712     /home/pi/test/pmap/a.out
00010000-00011000 rw-p 00000000 b3:02 317712     /home/pi/test/pmap/a.out
01171000-01192000 rw-p 00000000 00:00 0          [heap]
b6e36000-b6f59000 r-xp 00000000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2.13.so
b6f59000-b6f60000 ---p 00123000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2.13.so
b6f60000-b6f62000 r--p 00122000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2.13.so
b6f62000-b6f63000 rw-p 00124000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2.13.so
b6f63000-b6f66000 rw-p 00000000 00:00 0
b6f74000-b6f76000 r-xp 00000000 b3:02 27194      /usr/lib/arm-linux-gnueabihf/libcofi_rpi.so
b6f76000-b6f7d000 ---p 00002000 b3:02 27194      /usr/lib/arm-linux-gnueabihf/libcofi_rpi.so
b6f7d000-b6f7e000 rw-p 00001000 b3:02 27194      /usr/lib/arm-linux-gnueabihf/libcofi_rpi.so
b6f7e000-b6f9b000 r-xp 00000000 b3:02 1919       /lib/arm-linux-gnueabihf/ld-2.13.so
b6f9e000-b6fa2000 rw-p 00000000 00:00 0
b6fa2000-b6fa3000 r-xp 00000000 00:00 0          [sigpage]
b6fa3000-b6fa4000 r--p 0001d000 b3:02 1919       /lib/arm-linux-gnueabihf/ld-2.13.so
b6fa4000-b6fa5000 rw-p 0001e000 b3:02 1919       /lib/arm-linux-gnueabihf/ld-2.13.so
bec99000-becba000 rw-p 00000000 00:00 0          [stack]
ffff0000-ffff1000 r-xp 00000000 00:00 0          [vectors]
</code></p>

<p>a.out.maps内容分析如下</p>

<p><code>
00008000-00009000 r-xp 00000000 b3:02 317712     /home/pi/test/pmap/a.out  
代码段，funcA在这个区间,权限是r-xp，有读、执行权限，p是private
</code></p>

<p><code>
00010000-00011000 rw-p 00000000 b3:02 317712     /home/pi/test/pmap/a.out  
数据段，s_buf在这个区间,权限是rw-p，有读写，p是private
</code></p>

<p><code>
01171000-01192000 rw-p 00000000 00:00 0          [heap]
堆空间，pheap在这个区间，权限是rw-p，有读写，p是private
</code></p>

<p><code>
b6e36000-b6f59000 r-xp 00000000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2.13.so
libc库代码段
</code></p>

<p><code>
b6f59000-b6f60000 ---p 00123000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2.13.so
libc库内存防止越界空间，权限是---p，没有rwx权限，用户访问就触发段错误
</code></p>

<p><code>
b6f60000-b6f62000 r--p 00122000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2.13.so
libc库只读内存区。如果const变量，则在代码段；如果是全局变量则在数据段，还不知道这个区域内容。
</code></p>

<p><code>
b6f62000-b6f63000 rw-p 00124000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2.13.so
libc库数据段
</code></p>

<p><code>
b6f63000-b6f66000 rw-p 00000000 00:00 0
b6f9e000-b6fa2000 rw-p 00000000 00:00 0
未知，权限rw-p应该共享库相关的数据区
</code></p>

<p><code>
b6f74000-b6f76000 r-xp 00000000 b3:02 27194      /usr/lib/arm-linux-gnueabihf/libcofi_rpi.so
b6f76000-b6f7d000 ---p 00002000 b3:02 27194      /usr/lib/arm-linux-gnueabihf/libcofi_rpi.so
b6f7d000-b6f7e000 rw-p 00001000 b3:02 27194      /usr/lib/arm-linux-gnueabihf/libcofi_rpi.so
b6f7e000-b6f9b000 r-xp 00000000 b3:02 1919       /lib/arm-linux-gnueabihf/ld-2.13.so
b6fa3000-b6fa4000 r--p 0001d000 b3:02 1919       /lib/arm-linux-gnueabihf/ld-2.13.so
b6fa4000-b6fa5000 rw-p 0001e000 b3:02 1919       /lib/arm-linux-gnueabihf/ld-2.13.so
同libc分析
</code></p>

<p><code>
b6fa2000-b6fa3000 r-xp 00000000 00:00 0          [sigpage]
和信号相关的一个page，ARM架构独有好像
</code></p>

<p><code>
bec99000-becba000 rw-p 00000000 00:00 0          [stack]
栈空间，局部变量buf在这个区间
</code></p>

<p><code>
ffff0000-ffff1000 r-xp 00000000 00:00 0          [vectors]
中断向量
</code></p>

<p>待完善…</p>

<h3 id="section-1">参考资料</h3>

<p><a href="http://stackoverflow.com/questions/1401359/understanding-linux-proc-id-maps">http://stackoverflow.com/questions/1401359/understanding-linux-proc-id-maps</a></p>

<p><a href="http://stackoverflow.com/questions/16524895/proc-pid-maps-shows-pages-with-no-rwx-permissions-on-x86-64-linux">http://stackoverflow.com/questions/16524895/proc-pid-maps-shows-pages-with-no-rwx-permissions-on-x86-64-linux</a></p>

<p><a href="https://yq.aliyun.com/articles/54405">https://yq.aliyun.com/articles/54405</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内存占用分布分析]]></title>
    <link href="http://xixitalk.github.io/blog/2016/07/12/linux-mem-used/"/>
    <updated>2016-07-12T05:07:20+08:00</updated>
    <id>http://xixitalk.github.io/blog/2016/07/12/linux-mem-used</id>
    <content type="html"><![CDATA[<h2 id="section">1. 内存占用</h2>

<p>linux内存占用分两部分：一部分是不可见的，内核代码段数据段的本身的占用空间，对于PC 上几个G的内存来说可能很小可以忽略不计，但是只有几十M内存的嵌入式环境来说就不能忽略了。另一部分就是linux系统可见的内存，<code>free</code>命令里的<code>total</code>或者<code>cat /proc/meminfo</code>里看到的<code>MemTotal</code>。</p>

<!--more-->

<h3 id="section-1">1.1 内核代码段数据段</h3>
<p>通过内核对应带调试信息文件vmlinux或者System.map文件，能查到如下符号：<code>_stext</code> <code>_etext</code>  <code>__bss_start</code>  <code>__bss_stop</code> <code>_end</code>。   <code>__bss_stop</code> <code>_end</code>值是一样的。<code>_etext</code> 减<code>_stext</code>就是代码段大小，  <code>__bss_stop</code>减<code>__bss_start</code> 就是数据段大小。代码段和数据段之前的空间是<code>Init</code>段，内核初始化只运行一次的代码放在这个段，内核初始化后会重新覆盖利用这块空间。</p>

<p><code>
_stext                     C0008160
_etext                     C051B958   代码段大小：0x5137F8 
__bss_start                C05872E4
__bss_stop                 C060EBF0   数据段大小：0x8790C 
_end                       C060EBF0 
</code></p>

<h3 id="linux">1.2 linux系统管理内存</h3>

<p>linux系统可见的内存，<code>free</code>命令里的<code>total</code>或者<code>cat /proc/meminfo</code>里看到的<code>MemTotal</code>。内存管理太复杂了，完整拼接出来<code>total</code>或者<code>MemTotal</code>几乎不可能，但可以有几个重要的部分。</p>

<h4 id="section-2">1.2.1 空闲内存</h4>

<p>空闲内存：meminfo(cat /proc/meminfo)里的<code>MemFree</code> + <code>Buffers</code> + <code>Cached</code> + <code>SwapCached</code></p>

<h4 id="section-3">1.2.2 内核内存占用</h4>

<p>内核内存占用：meminfo(cat /proc/meminfo)里的<code>Slab</code> + <code>KernelStack</code> + <code>PageTables</code></p>

<h4 id="section-4">1.2.3 应用内存占用</h4>

<p>应用内存有两个视图，一个是虚拟内存视图，一个物理内存（RSS）视图。
比如查看进程编号为1的Init进程内存占用</p>

<p><code>
$cat /pric/1/statm
537 18 11 7 0 75 0
</code></p>

<p>537是虚拟内存的page数，18是物理内存page数，每个page是4K Bytes。</p>

<p>用下面的脚本可以把系统所有应用的虚拟内存和物理内存统计出来，应用间的内存比较分析是有意义的或者同一个应用不同版本间的比较是有意义的。</p>

<p>```
#/bin/bash
RSS=0
VM=0
for PROC in <code>ls /proc/|grep "^[0-9]"</code>
do
  if [ -f /proc/$PROC/statm ]; then
      TEP1=<code>cat /proc/$PROC/statm | awk '{print ($1)}'</code>
      TEP2=<code>cat /proc/$PROC/statm | awk '{print ($2)}'</code>
      echo $PROC $TEP1 $TEP2
      RSS=<code>expr $RSS + $TEP2</code>
      VM=<code>expr $VM + $TEP1</code>
  fi
done
RSS=<code>expr $RSS \* 4</code>
VM=<code>expr $VM \* 4</code></p>

<p>echo “APP total” $RSS”KB”, $VM”KB”,
```</p>

<h2 id="section-5">2. 参考资料</h2>

<p>http://blog.yufeng.info/archives/2456</p>
]]></content>
  </entry>
  
</feed>

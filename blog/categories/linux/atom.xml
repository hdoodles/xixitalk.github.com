<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | xixitalk's snippet]]></title>
  <link href="http://xixitalk.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.io/"/>
  <updated>2016-07-12T17:15:09+08:00</updated>
  <id>http://xixitalk.github.io/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux应用内存占用maps分析]]></title>
    <link href="http://xixitalk.github.io/blog/2016/07/12/app-mem-used-on-linux/"/>
    <updated>2016-07-12T18:50:20+08:00</updated>
    <id>http://xixitalk.github.io/blog/2016/07/12/app-mem-used-on-linux</id>
    <content type="html"><![CDATA[<p>假设一个应用的pid是PID，则<code>cat /proc/PID/maps</code>显示这个应用的内存占用。</p>

<!--more-->

<h3 id="maps">maps格式</h3>

<p><code>
address           perms offset  dev   inode   pathname
00008000-00009000 r-xp 00000000 b3:02 317712     /home/pi/test/pmap/a.out
</code></p>

<ol>
  <li><strong>address</strong> - This is the starting and ending address of the region in the process’s address space。说明：都是虚拟地址，并不代码真实的物理地址。</li>
  <li><strong>permissions</strong> - This describes how pages in the region can be accessed. There are four different permissions: read, write, execute, and shared. If read/write/execute are disabled, a ‘-‘ will appear instead of the ‘r’/’w’/’x’. If a region is not shared, it is private, so a ‘p’ will appear instead of an ‘s’. If the process attempts to access memory in a way that is not permitted, a segmentation fault is generated. Permissions can be changed using the <code>mprotect</code> system call.</li>
  <li><strong>offset</strong> - If the region was mapped from a file (using mmap), this is the offset in the file where the mapping begins. If the memory was not mapped from a file, it’s just 0.</li>
  <li><strong>device</strong> - If the region was mapped from a file, this is the major and minor device number (in hex) where the file lives.</li>
  <li><strong>inode</strong> - If the region was mapped from a file, this is the file number.</li>
  <li><strong>pathname</strong> - If the region was mapped from a file, this is the name of the file. This field is blank for anonymous mapped regions. There are also special regions with names like [heap], [stack], or [vdso]. [vdso] stands for virtual dynamic shared object. It’s used by system calls to switch to kernel mode. Here’s a good article about it.</li>
</ol>

<h3 id="section">实例分析</h3>

<p>写一个简单的实例main.c，funcA地址在代码段，s_buf在数据段，buf是局部变量，在栈空间，pheap是malloc申请的，是heap空间。</p>

<p>```
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h /></stdlib.h></stdio.h></p>

<p>static char s_buf[1024];
void funcA(void)
{
  printf(“funcA address:%08x\n”,funcA);
}</p>

<p>int main(int argc,char *argv[])
{
  int i = 0;
  char buf[1024] = {0};
  char *pheap = malloc(2048);</p>

<p>for(i=0;i&lt;1000;i++)
  {
    funcA();
    printf(“buf address:%08x\n”,buf);
    printf(“s_buf address:%08x\n”,s_buf);
    printf(“pheap address:%08x\n”,pheap);
    sleep(10);
  }
  free(pheap);
  return 0;
}
```</p>

<p>编译运行</p>

<p><code>
$gcc main.c
$./a.out
funcA address:000084a0
buf address:becb9318
s_buf address:000107ac
pheap address:01171008
funcA address:000084a0
buf address:becb9318
s_buf address:000107ac
pheap address:01171008
</code></p>

<p>在另一个窗口</p>

<p><code>
$ ps aux | grep out
pi       27725  0.0  0.2   1676   424 pts/0    S+   10:43   0:00 ./a.out
$ cat /proc/27725/maps &gt; a.out.maps
$ cat a.out.maps
00008000-00009000 r-xp 00000000 b3:02 317712     /home/pi/test/pmap/a.out
00010000-00011000 rw-p 00000000 b3:02 317712     /home/pi/test/pmap/a.out
01171000-01192000 rw-p 00000000 00:00 0          [heap]
b6e36000-b6f59000 r-xp 00000000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2
.13.so
b6f59000-b6f60000 ---p 00123000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2
.13.so
b6f60000-b6f62000 r--p 00122000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2
.13.so
b6f62000-b6f63000 rw-p 00124000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2
.13.so
b6f63000-b6f66000 rw-p 00000000 00:00 0
b6f74000-b6f76000 r-xp 00000000 b3:02 27194      /usr/lib/arm-linux-gnueabihf/li
bcofi_rpi.so
b6f76000-b6f7d000 ---p 00002000 b3:02 27194      /usr/lib/arm-linux-gnueabihf/li
bcofi_rpi.so
b6f7d000-b6f7e000 rw-p 00001000 b3:02 27194      /usr/lib/arm-linux-gnueabihf/li
bcofi_rpi.so
b6f7e000-b6f9b000 r-xp 00000000 b3:02 1919       /lib/arm-linux-gnueabihf/ld-2.1
3.so
b6f9e000-b6fa2000 rw-p 00000000 00:00 0
b6fa2000-b6fa3000 r-xp 00000000 00:00 0          [sigpage]
b6fa3000-b6fa4000 r--p 0001d000 b3:02 1919       /lib/arm-linux-gnueabihf/ld-2.1
3.so
b6fa4000-b6fa5000 rw-p 0001e000 b3:02 1919       /lib/arm-linux-gnueabihf/ld-2.1
3.so
bec99000-becba000 rw-p 00000000 00:00 0          [stack]
ffff0000-ffff1000 r-xp 00000000 00:00 0          [vectors]
</code></p>

<p>a.out.maps内容分析如下</p>

<p><code>
00008000-00009000 r-xp 00000000 b3:02 317712     /home/pi/test/pmap/a.out  
代码段，funcA在这个区间,权限是r-xp，有读、执行权限，p是private
</code></p>

<p><code>
00010000-00011000 rw-p 00000000 b3:02 317712     /home/pi/test/pmap/a.out  
数据段，s_buf在这个区间,权限是rw-p，有读写，p是private
</code></p>

<p><code>
01171000-01192000 rw-p 00000000 00:00 0          [heap]
堆空间，pheap在这个区间，权限是rw-p，有读写，p是private
</code></p>

<p><code>
b6e36000-b6f59000 r-xp 00000000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2.13.so
libc库代码段
</code></p>

<p><code>
b6f59000-b6f60000 ---p 00123000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2.13.so
libc库内存防止越界空间，权限是---p，没有rwx权限，用户访问就触发段错误
</code></p>

<p><code>
b6f60000-b6f62000 r--p 00122000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2.13.so
libc库只读内存区。如果const变量，则在代码段；如果是全局变量则在数据段，还不知道这个区域内容。
</code></p>

<p><code>
b6f62000-b6f63000 rw-p 00124000 b3:02 1925       /lib/arm-linux-gnueabihf/libc-2.13.so
libc库数据段
</code></p>

<p><code>
b6f63000-b6f66000 rw-p 00000000 00:00 0
b6f9e000-b6fa2000 rw-p 00000000 00:00 0
未知
</code></p>

<p><code>
b6f74000-b6f76000 r-xp 00000000 b3:02 27194      /usr/lib/arm-linux-gnueabihf/libcofi_rpi.so
b6f76000-b6f7d000 ---p 00002000 b3:02 27194      /usr/lib/arm-linux-gnueabihf/libcofi_rpi.so
b6f7d000-b6f7e000 rw-p 00001000 b3:02 27194      /usr/lib/arm-linux-gnueabihf/libcofi_rpi.so
b6f7e000-b6f9b000 r-xp 00000000 b3:02 1919       /lib/arm-linux-gnueabihf/ld-2.13.so
b6fa3000-b6fa4000 r--p 0001d000 b3:02 1919       /lib/arm-linux-gnueabihf/ld-2.13.so
b6fa4000-b6fa5000 rw-p 0001e000 b3:02 1919       /lib/arm-linux-gnueabihf/ld-2.13.so
同libc分析
</code></p>

<p><code>
b6fa2000-b6fa3000 r-xp 00000000 00:00 0          [sigpage]
和信号相关的一个page，ARM架构独有好像
</code></p>

<p><code>
bec99000-becba000 rw-p 00000000 00:00 0          [stack]
栈空间，局部变量buf在这个区间
</code></p>

<p><code>
ffff0000-ffff1000 r-xp 00000000 00:00 0          [vectors]
中断向量
</code></p>

<p>待完善…</p>

<h3 id="section-1">参考资料</h3>

<p><a href="http://stackoverflow.com/questions/1401359/understanding-linux-proc-id-maps">http://stackoverflow.com/questions/1401359/understanding-linux-proc-id-maps</a></p>

<p><a href="http://stackoverflow.com/questions/16524895/proc-pid-maps-shows-pages-with-no-rwx-permissions-on-x86-64-linux">http://stackoverflow.com/questions/16524895/proc-pid-maps-shows-pages-with-no-rwx-permissions-on-x86-64-linux</a></p>

<p><a href="https://yq.aliyun.com/articles/54405">https://yq.aliyun.com/articles/54405</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux内存占用分布分析]]></title>
    <link href="http://xixitalk.github.io/blog/2016/07/12/linux-mem-used/"/>
    <updated>2016-07-12T05:07:20+08:00</updated>
    <id>http://xixitalk.github.io/blog/2016/07/12/linux-mem-used</id>
    <content type="html"><![CDATA[<h2 id="section">1. 内存占用</h2>

<p>linux内存占用分两部分：一部分是不可见的，内核代码段数据段的本身的占用空间，对于PC 上几个G的内存来说可能很小可以忽略不计，但是只有几十M内存的嵌入式环境来说就不能忽略了。另一部分就是linux系统可见的内存，<code>free</code>命令里的<code>total</code>或者<code>cat /proc/meminfo</code>里看到的<code>MemTotal</code>。</p>

<!--more-->

<h3 id="section-1">1.1 内核代码段数据段</h3>
<p>通过内核对应带调试信息文件vmlinux或者System.map文件，能查到如下符号：<code>_stext</code> <code>_etext</code>  <code>__bss_start</code>  <code>__bss_stop</code> <code>_end</code>。   <code>__bss_stop</code> <code>_end</code>值是一样的。<code>_etext</code> 减<code>_stext</code>就是代码段大小，  <code>__bss_stop</code>减<code>__bss_start</code> 就是数据段大小。代码段和数据段之前的空间是<code>Init</code>段，内核初始化只运行一次的代码放在这个段，内核初始化后会重新覆盖利用这块空间。</p>

<p><code>
_stext                     C0008160
_etext                     C051B958   代码段大小：0x5137F8 
__bss_start                C05872E4
__bss_stop                 C060EBF0   数据段大小：0x8790C 
_end                       C060EBF0 
</code></p>

<h3 id="linux">1.2 linux系统管理内存</h3>

<p>linux系统可见的内存，<code>free</code>命令里的<code>total</code>或者<code>cat /proc/meminfo</code>里看到的<code>MemTotal</code>。内存管理太复杂了，完整拼接出来<code>total</code>或者<code>MemTotal</code>几乎不可能，但可以有几个重要的部分。</p>

<h4 id="section-2">1.2.1 空闲内存</h4>

<p>空闲内存：meminfo(cat /proc/meminfo)里的<code>MemFree</code> + <code>Buffers</code> + <code>Cached</code> + <code>SwapCached</code></p>

<h4 id="section-3">1.2.2 内核内存占用</h4>

<p>内核内存占用：meminfo(cat /proc/meminfo)里的<code>Slab</code> + <code>KernelStack</code> + <code>PageTables</code></p>

<h4 id="section-4">1.2.3 应用内存占用</h4>

<p>应用内存有两个视图，一个是虚拟内存视图，一个物理内存（RSS）视图。
比如查看进程编号为1的Init进程内存占用</p>

<p><code>
$cat /pric/1/statm
537 18 11 7 0 75 0
</code></p>

<p>537是虚拟内存的page数，18是物理内存page数，每个page是4K Bytes。</p>

<p>用下面的脚本可以把系统所有应用的虚拟内存和物理内存统计出来，应用间的内存比较分析是有意义的或者同一个应用不同版本间的比较是有意义的。</p>

<p>```
#/bin/bash
RSS=0
VM=0
for PROC in <code>ls /proc/|grep "^[0-9]"</code>
do
  if [ -f /proc/$PROC/statm ]; then
      TEP1=<code>cat /proc/$PROC/statm | awk '{print ($1)}'</code>
      TEP2=<code>cat /proc/$PROC/statm | awk '{print ($2)}'</code>
      echo $PROC $TEP1 $TEP2
      RSS=<code>expr $RSS + $TEP2</code>
      VM=<code>expr $VM + $TEP1</code>
  fi
done
RSS=<code>expr $RSS \* 4</code>
VM=<code>expr $VM \* 4</code></p>

<p>echo “APP total” $RSS”KB”, $VM”KB”,
```</p>

<h2 id="section-5">2. 参考资料</h2>

<p>http://blog.yufeng.info/archives/2456</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux常用命令和配置]]></title>
    <link href="http://xixitalk.github.io/blog/2013/07/11/linux-command/"/>
    <updated>2013-07-11T00:08:18+08:00</updated>
    <id>http://xixitalk.github.io/blog/2013/07/11/linux-command</id>
    <content type="html"><![CDATA[<p>下面是最近工作需要用到的命令，记录下来以供查阅。</p>

<h3 id="test">添加新用户test</h3>

<pre><code>useradd test
passwd test
mkdir /home/test
chown test /home/test
</code></pre>

<!--more-->

<p>将用户test加到管理员组</p>

<pre><code>gpasswd -a test admin
</code></pre>

<h3 id="ubuntusamba">ubuntu重启samba</h3>

<pre><code>sudo service smbd start
sudo service smbd stop
sudo service smbd restart
</code></pre>

<h3 id="terminal">在terminal里方向键翻不出历史命令</h3>
<p>修改设置用户shell为bash，debian和ubuntu的新版本默认是dash</p>

<h3 id="svn">SVN命令操作</h3>

<h4 id="checkout">checkout</h4>

<pre><code>svn checkout http://10.41.1.1/svn/project/tags/  --username test
</code></pre>

<h4 id="update">update</h4>

<pre><code>svn update   //更新到最新
svn update --revision N //更新到版本N，-r
</code></pre>

<h4 id="add">add</h4>

<pre><code>svn add file  //添加文件到版本管理里，需要commit操作才到远程代码仓库，file支持通配符
</code></pre>

<h4 id="commit">commit</h4>

<pre><code>svn commit -m "bugs fix"
</code></pre>

<h4 id="log">log</h4>

<pre><code>svn log [PATH]  //查看修改提交的commit log
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[中国时区：CCT]]></title>
    <link href="http://xixitalk.github.io/blog/2013/07/06/china-coast-time/"/>
    <updated>2013-07-06T16:17:55+08:00</updated>
    <id>http://xixitalk.github.io/blog/2013/07/06/china-coast-time</id>
    <content type="html"><![CDATA[<p>octopress的<code>rake generate</code>的时候，如果时间在晚上22：00到24：00左右，发现生成的博客HTML文件日期会是第二天的日期。Google之后有人说要加<code>TZ=CCT</code>来设定时区。</p>

<!--more-->

<p>CCT（China Coast Time）是中国沿海时间。在用户目录下<code>.profile</code>或者<code>.bashrc</code>加入<code>TZ=CCT</code>。</p>

<pre><code>export TZ=CCT
</code></pre>

<p>可能<code>Asia/Shanghai</code>更好些</p>

<pre><code>export TZ='Asia/Shanghai'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grep命令手册]]></title>
    <link href="http://xixitalk.github.io/blog/2013/06/19/grep-man/"/>
    <updated>2013-06-19T01:51:43+08:00</updated>
    <id>http://xixitalk.github.io/blog/2013/06/19/grep-man</id>
    <content type="html"><![CDATA[<p>详细参看这个博文 <a href="http://blog.51yip.com/linux/1008.html">http://blog.51yip.com/linux/1008.html</a></p>

<p>GNU Grep 2.14 <a href="http://www.gnu.org/software/grep/manual/grep.html">http://www.gnu.org/software/grep/manual/grep.html</a></p>

<p>我常用grep命令是这样的：</p>

<p><code>
grep -r -n -I Search_String  DIR
</code></p>

<p>-I 跳过二进制文件<br />
-r 递归子目录<br />
-n 显示匹配的行号<br />
Search_String 寻找匹配的字符串<br />
DIR 查找的目录范围</p>

<!--more-->

<p>```
grep –help<br />
匹配模式选择:<br />
 -E, –extended-regexp     扩展正则表达式egrep<br />
 -F, –fixed-strings       一个换行符分隔的字符串的集合fgrep<br />
 -G, –basic-regexp        基本正则<br />
 -P, –perl-regexp         调用的perl正则<br />
 -e, –regexp=PATTERN      后面根正则模式，默认无<br />
 -f, –file=FILE           从文件中获得匹配模式<br />
 -i, –ignore-case         不区分大小写<br />
 -w, –word-regexp         匹配整个单词<br />
 -x, –line-regexp         匹配整行<br />
 -z, –null-data           a data line ends in 0 byte, not newline  </p>

<p>杂项:<br />
 -s, –no-messages         不显示错误信息<br />
 -v, –invert-match        显示不匹配的行<br />
 -V, –version             显示版本号<br />
 –help                    显示帮助信息<br />
 –mmap                use memory-mapped input if possible  </p>

<p>输入控制:<br />
 -m, –max-count=NUM       匹配的最大数<br />
 -b, –byte-offset         打印匹配行前面打印该行所在的块号码。<br />
 -n, –line-number         显示的加上匹配所在的行号<br />
 –line-buffered           刷新输出每一行<br />
 -H, –with-filename       当搜索多个文件时，显示匹配文件名前缀<br />
 -h, –no-filename         当搜索多个文件时，不显示匹配文件名前缀<br />
 –label=LABEL            print LABEL as filename for standard input<br />
 -o, –only-matching       show only the part of a line matching PATTERN<br />
 -q, –quiet, –silent     不显示任何东西<br />
 –binary-files=TYPE   assume that binary files are TYPE<br />
 TYPE is ‘binary’, ‘text’, or ‘without-match’<br />
 -a, –text                匹配二进制的东西<br />
 -I                        不匹配二进制的东西<br />
 -d, –directories=ACTION  目录操作，读取，递归，跳过<br />
 ACTION is ‘read’, ‘recurse’, or ‘skip’<br />
 -D, –devices=ACTION      设置对设备，FIFO,管道的操作，读取，跳过<br />
 ACTION is ‘read’ or ‘skip’<br />
 -R, -r, –recursive       递归调用<br />
 –include=PATTERN     files that match PATTERN will be examined<br />
 –exclude=PATTERN     files that match PATTERN will be skipped.<br />
 –exclude-from=FILE   files that match PATTERN in FILE will be skipped.<br />
 -L, –files-without-match 匹配多个文件时，显示不匹配的文件名<br />
 -l, –files-with-matches  匹配多个文件时，显示匹配的文件名<br />
 -c, –count               显示匹配了多少次<br />
 -Z, –null                print 0 byte after FILE name  </p>

<p>文件控制:<br />
 -B, –before-context=NUM  打印匹配本身以及前面的几个行由NUM控制<br />
 -A, –after-context=NUM   打印匹配本身以及随后的几个行由NUM控制<br />
 -C, –context=NUM         打印匹配本身以及随后，前面的几个行由NUM控制<br />
 -NUM                      根-C的用法一样的<br />
 –color[=WHEN],<br />
 –colour[=WHEN]       use markers to distinguish the matching string<br />
 WHEN may be <code>always', </code>never’ or <code>auto'.  
 -U, --binary              do not strip CR characters at EOL (MSDOS)  
 -u, --unix-byte-offsets   report offsets as if CRs were not there (MSDOS)  
</code>``</p>
]]></content>
  </entry>
  
</feed>

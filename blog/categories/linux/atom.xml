<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | xixitalk's snippet]]></title>
  <link href="http://xixitalk.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.io/"/>
  <updated>2016-08-30T11:14:18+00:00</updated>
  <id>http://xixitalk.github.io/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[产品中多个不明可执行程序dvrHelper]]></title>
    <link href="http://xixitalk.github.io/blog/2016/08/30/virus-dvrHelper/"/>
    <updated>2016-08-30T16:48:47+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/08/30/virus-dvrHelper</id>
    <content type="html"><![CDATA[<p>一个数据类产品，测试报告描述：上传下载加浏览器看视频，一个小时内必死机。</p>

<p>死机现场初步分析：系统内存耗尽死机，但是发现进程里多了三个奇怪的进程，进程名都像是随机字符串，两个死机现场都有，并且进程名还随机的不一样。</p>

<!--more-->

<p>有人去分析内存问题，我来分析三个奇怪的进程。</p>

<p>这三个进程父进程是Init，执行的命令是<code>dvrHelper</code>，开始我怀疑版本自带的程序，查看了版本编译后的文件系统，没有这个文件，在整个版本代码里搜索这个字符串，没有找到任何踪迹。这时候有人告诉我版本的根文件系统里多了<code>dvrHelper</code>文件，重烧版本是没有这个文件的。手动运行这个文件，提示</p>

<p><code>
listening tun0
</code></p>

<p>运行结束后，进程列表里就多了三个奇怪的进程。父进程是Init，这是linux守护进程惯用的机制。我把dvrHelper上传到<code>https://www.virustotal.com</code>在线扫描，55个杀毒软件，有2个提示异常。</p>

<p>```
SHA256:	c483618671766847fc75ea79fdc201df2e4a93f501dc98ec9c6f283fb1d4336c
File name:	dvrHelper
Detection ratio:	2 / 55
Analysis date:	2016-08-29 08:51:11 UTC ( 22 hours, 56 minutes ago )</p>

<p>AVG	Linux/Fgt.CA	20160829
ESET-NOD32	a variant of Linux/Gafgyt.SE	20160829
```</p>

<p>这时候基本确认，<code>dvrHelper</code>文件是个木马程序了。引入这个木马的路径分析只有两个，一个通过<code>adb push</code>，一个就是<code>telnet</code>。先禁用了<code>adb</code>功能，发现问题还是出现了。<strong>同时禁用<code>adb</code>和<code>telnetd</code>，问题不出现了</strong>。现在问题聚焦在<code>telnetd</code>服务上。</p>

<p><code>telnet</code>是一个远程协议，<code>telnetd</code>是一个实现<code>telnet协议</code>的服务程序。</p>

<p>PC上用<code>wireshark</code>抓包，没有抓到PC上应用程序登录<code>telnetd</code>的证据。后来突然想到<code>pppoe</code>功能可能会分配一个公网IP，<code>ifconfig</code>一看，果然电信分配了一个公网IP。用手机登录这个公网IP的<code>telnet</code>，也果然登录到这个产品里了。这样就怀疑产品是通过公网IP登录产品的<code>telnetd</code>服务，把木马上传到产品里了。</p>

<p>同时在内核<code>fs/open.c</code>里加代码，如果打开<code>dvrHelper</code>文件就panic死机。死机显示在通过busybox执行<code>cp /bin/echo dvrHelper</code>，顺着父进程一直往上找，找到了<code>telnetd</code>进程。这样也再次排除了<code>adb</code>的嫌疑。</p>

<p><code>
long do_sys_open(int dfd, const char __user *filename, int flags, umode_t mode)
{
        if(strstr(filename,"dvrHelper"))
            panic("[testcode] dvrHelper found\n");
}
</code>    </p>

<p>这时候祭出了<code>tcpdump</code>工具，在产品内部运行<code>tcpdump</code>，只抓取公网网口的23端口数据包。</p>

<p><code>
tcpdump -i ppp port 23
</code></p>

<p><strong>十几分钟的时间，就抓到了来自台湾 泰国 巴西 印度的<code>telnet</code>登录，再一会根目录就多了<code>dvrHelper</code>文件。</strong></p>

<p>修改意见：
1、发货版本禁用<code>telnetd</code>服务
2、开发版本用<code>iptables</code>设置禁止<code>ppp</code>网口的23端口访问，不用admin：admin这样简单的账号密码</p>

<p>PS：因特网真是太危险了</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[netlink遇到ENOBUFS错误]]></title>
    <link href="http://xixitalk.github.io/blog/2016/08/18/netlink-ENOBUFS/"/>
    <updated>2016-08-18T08:49:42+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/08/18/netlink-ENOBUFS</id>
    <content type="html"><![CDATA[<p>一个场景：USB插拔的时候内核会通过netlink广播到user层，多个应用接收这个消息。但是出现了errno 105错误，105错误是：<code>No buffer space available</code></p>

<!--more-->

<p>经过内核代码分析，<code>af_netlink.c</code>里<code>netlink_broadcast_deliver</code>函数返回-1才会触发<code>ENOBUFS</code>流程。加<code>printk</code>和<code>panic</code>复现问题(因为嵌入式开发环境抓panic死机现场分析和串口log都太方便了)。</p>

<p>```
static int netlink_broadcast_deliver(struct sock *sk, struct sk_buff *skb)
{
	struct netlink_sock *nlk = nlk_sk(sk);</p>

<pre><code>if (atomic_read(&amp;sk-&gt;sk_rmem_alloc) &lt;= sk-&gt;sk_rcvbuf &amp;&amp;
    !test_bit(0, &amp;nlk-&gt;state)) {
	skb_set_owner_r(skb, sk);
	__netlink_sendskb(sk, skb);
	return atomic_read(&amp;sk-&gt;sk_rmem_alloc) &gt; (sk-&gt;sk_rcvbuf &gt;&gt; 1);
}
printk("[testcode]netlink sk_rmem_alloc:%x sk_rcvbuf:%x \n",atomic_read(&amp;sk-&gt;sk_rmem_alloc),sk-&gt;sk_rcvbuf);
panic("[testcode]netlink broadcast panic\n");
return -1; } ```
</code></pre>

<p>抓取的串口log如下显示<code>sk_rcvbuf</code>确实小于<code>sk_rmem_alloc</code>了，没有空间了。</p>

<blockquote>
  <p>[   18.618473] [testcode]netlink sk_rmem_alloc:b00 sk_rcvbuf:8b8  [<br />
18.623727] Kernel panic - not syncing: [testcode]netlink broadcast panic</p>
</blockquote>

<p>对比发现死机现场里的<code>kobject_uevent_env</code>函数里的<code>uevent_sock</code>变量里<code>sk_sndbuf</code>和<code>sk_rcvbuf</code>都是163840（160K）。而<code>netlink_broadcast_deliver</code>里sock是8b8（2232）。很明显netlink接收socket里的sock比内核驱动的sock接收buf差距太大了。</p>

<p>内核sock.c里<code>sock_init_data</code>函数里进行sock初始化，<code>sk_rcvbuf</code>和<code>sk_sndbuf</code>初始化成<code>sysctl_rmem_default</code>。<code>sysctl_rmem_default</code>是个全局变量，导出的panic现场看值就是163840。</p>

<blockquote>
  <p>sk-&gt;sk_rcvbuf		=	sysctl_rmem_default;
sk-&gt;sk_sndbuf		=	sysctl_wmem_default;</p>
</blockquote>

<p>看应用netlink的接收，果然用<code>setsockopt</code>修改了<code>RCVBUF</code>。</p>

<p>```
    const int buffersize = 1024;<br />
    int ret;  </p>

<pre><code>struct sockaddr_nl snl;  
bzero(&amp;snl, sizeof(struct sockaddr_nl));  
snl.nl_family = AF_NETLINK;  
snl.nl_pid = getpid();  
snl.nl_groups = 1;  

int s = socket(PF_NETLINK, SOCK_DGRAM, NETLINK_KOBJECT_UEVENT);  
if (s == -1)   
{  
    perror("socket");  
    return -1;  
}  
setsockopt(s, SOL_SOCKET, SO_RCVBUF, &amp;buffersize, sizeof(buffersize));   ```
</code></pre>

<p>C库的<code>setsockopt</code>函数会通过系统调用进入到内核<code>sock.c</code>文件里的<code>sock_setsockopt</code>函数。<code>SOCK_MIN_RCVBUF</code>就是2232。很明显应用<code>setsockopt</code>的<code>buffersize</code>是1024，乘以2还小于<code>SOCK_MIN_RCVBUF</code>，所以<code>sk_rcvbuf</code>就变成<code>SOCK_MIN_RCVBUF</code>。</p>

<p><code>
	case SO_RCVBUF:
	    if (val &gt; sysctl_rmem_max)
			val = sysctl_rmem_max;
		if ((val * 2) &lt; SOCK_MIN_RCVBUF)
			sk-&gt;sk_rcvbuf = SOCK_MIN_RCVBUF;
		else
			sk-&gt;sk_rcvbuf = val * 2;
		break;
</code></p>

<p>解决办法：删除应用代码里的<code>setsockopt</code>语句,这样<code>sk_rcvbuf</code>默认就是160K，或者用<code>setsockopt</code>设置合适的大小。</p>

<p>通过Google发现，网络上好多netlink实例都用了<code>setsockopt</code>设置了1024的buffer大小。应用这个代码应该是从网上抄来的。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在内核里获取当前任务名]]></title>
    <link href="http://xixitalk.github.io/blog/2016/08/10/current-comm/"/>
    <updated>2016-08-10T08:33:02+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/08/10/current-comm</id>
    <content type="html"><![CDATA[<p>遇到一个问题，在一个内核模块里使用current-&gt;comm保存当前任务名，编译报错:<code>dereferencing pointer to incomplete type</code>。</p>

<!--more-->

<p>经过搜索发现，除了要包含<code>current.h</code>外，还要包含<code>sched.h</code>。原因是<code>struct task_struct</code>在<code>sched.h</code>里定义。<code>comm</code>是数组字符串，长度是<code>TASK_COMM_LEN</code>，一般是16个字节，记得保证足够的空间，防止内存越界。</p>

<p>用法实例如下：</p>

<p>```
#include &lt;linux/sched.h&gt;
#include &lt;asm/current.h&gt;</p>

<p>static char g_cfg_app_name[TASK_COMM_LEN*2] = { 0 };</p>

<p>strncpy(g_cfg_app_name,current-&gt;comm,TASK_COMM_LEN);
```</p>

<h4 id="section">参考文章</h4>

<p><a href="http://www.xuebuyuan.com/1814455.html">http://www.xuebuyuan.com/1814455.html</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jemalloc add2line ligsigsegv]]></title>
    <link href="http://xixitalk.github.io/blog/2016/08/03/jemalloc-add2line-ligsigsegv/"/>
    <updated>2016-08-03T18:38:22+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/08/03/jemalloc-add2line-ligsigsegv</id>
    <content type="html"><![CDATA[<p>一些定位工具还需要研究</p>

<!--more-->

<p><a href="http://www.cnblogs.com/djinmusic/archive/2013/02/04/2891753.html">http://www.cnblogs.com/djinmusic/archive/2013/02/04/2891753.html</a></p>

<p><a href="http://blog.codingnow.com/2014/01/out_of_range_bug.html">http://blog.codingnow.com/2014/01/out_of_range_bug.html</a></p>

<p><a href="http://blog.csdn.net/olidrop/article/details/7295908">http://blog.csdn.net/olidrop/article/details/7295908</a></p>

<p><a href="https://www.gnu.org/software/libsigsegv/">https://www.gnu.org/software/libsigsegv/</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux内核代码瘦身]]></title>
    <link href="http://xixitalk.github.io/blog/2016/07/20/linux-kernel-source-strip/"/>
    <updated>2016-07-20T21:07:23+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/07/20/linux-kernel-source-strip</id>
    <content type="html"><![CDATA[<p>linux内核代码瘦身，原理：把不参与编译的代码删除，这样用Source Insight工具阅读代码的时候就轻简了很多。</p>

<p>例子数据：原本一个嵌入式linux内核代码1万7千个C文件，精简之后只有1222个C文件，删除了1万6千个C文件。</p>

<!--more-->

<h4 id="section">第一步 清理临时文件</h4>

<p>内核编译clean，把内核编译的临时文件都清除。</p>

<h4 id="c">第二步 保存所有C文件路径</h4>

<p><code>
cd linux-3.4.5
find ./ -name "*.c" | tee allsrc.txt
</code></p>

<h4 id="section-1">第三步 编译内核</h4>

<p>无需多讲，编译内核。</p>

<h4 id="strippy">第四步 用strip.py清除不参与编译的代码</h4>

<p>部分代码使用了include C代码，所以用<code>ignorefilelist</code>自定义文件过滤。<code>scripts</code>是工具目录，<code>./drivers/usb/gadget/</code>里inlucde C代码太多了，所以这两个目录直接目录过滤，添加到<code>ignorepathlist</code>自定义目录过滤里。</p>

<p>```
import sys
import os</p>

<p>ignorefilelist=[‘fsr-2level.c’,’fsr-3level.c’,’percpu-km.c’,’percpu-vm.c’,’nf_conntrack_h323_types.c’]
ignorepathlist=[’./scripts/’,’./drivers/usb/gadget/’]</p>

<p>f = open(‘allsrc.txt’,’r’)  </p>

<p>for line in f.readlines():
	cfilename=line.strip(‘\n’)
	objfilename=cfilename.replace(“.c”,”.o”)
	asmfilename=cfilename.replace(“.c”,”.s”)
	exefilename=cfilename.replace(“.c”,””)</p>

<pre><code>cfile=cfilename.split('/')[-1]
#print cfile

flag=False
for item in ignorepathlist:
	if cfilename.find(item)!=-1:
		#print cfilename
		flag=True
		break
if flag:
	continue

if cfile in ignorefilelist:
	#print cfile,cfilename
	continue

if  os.path.exists(objfilename):
	continue
if os.path.exists(asmfilename):
	#print asmfilename
	continue
if os.path.exists(exefilename):
	#print exefilename
	continue

if os.path.exists(cfilename):
	print objfilename,"NOT USING and rm ",cfilename
	os.remove(cfilename)
	pass
</code></pre>

<p>f.close()
```</p>

<p>保存代码为<code>strip.py</code>，保存在内核目录。</p>

<p><code>
cd linux-3.4.5
python strip.py
</code></p>

<h3 id="section-2">第五步 重新编译内核</h3>

<p>重新编译内核。</p>

<p>如果编译成功，清理临时文件后保存代码用于阅读；<br />
如果编译失败，恢复缺失的文件，修改strip.py，接着编译，直到内核重新编译通过，清理临时文件后保存代码用于阅读。</p>

]]></content>
  </entry>
  
</feed>
